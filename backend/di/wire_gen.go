// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	service4 "github.com/goda6565/ai-consultant/backend/internal/domain/chunk/service"
	"github.com/goda6565/ai-consultant/backend/internal/domain/document/service"
	service5 "github.com/goda6565/ai-consultant/backend/internal/domain/hearing/service"
	service6 "github.com/goda6565/ai-consultant/backend/internal/domain/hearing_message/service"
	service2 "github.com/goda6565/ai-consultant/backend/internal/domain/problem/service"
	service3 "github.com/goda6565/ai-consultant/backend/internal/domain/problem_field/service"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/environment"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/cloudtasks"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/database"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/database/repository/chunk"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/database/repository/document"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/database/repository/hearing"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/database/repository/hearing_message"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/database/repository/problem"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/database/repository/problem_field"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/database/transaction"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/firebase"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/gemini"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/ocr"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/google/storage"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/admin"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/admin/handler"
	document3 "github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/admin/handler/document"
	hearing3 "github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/admin/handler/hearing"
	hearingmessage2 "github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/admin/handler/hearing_message"
	problem3 "github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/admin/handler/problem"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/agent"
	handler3 "github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/agent/handler"
	hearing4 "github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/agent/handler/hearing"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/vector"
	handler2 "github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/vector/handler"
	chunk3 "github.com/goda6565/ai-consultant/backend/internal/infrastructure/http/echo/vector/handler/chunk"
	"github.com/goda6565/ai-consultant/backend/internal/infrastructure/zap"
	chunk2 "github.com/goda6565/ai-consultant/backend/internal/usecase/chunk"
	document2 "github.com/goda6565/ai-consultant/backend/internal/usecase/document"
	hearing2 "github.com/goda6565/ai-consultant/backend/internal/usecase/hearing"
	"github.com/goda6565/ai-consultant/backend/internal/usecase/hearing_message"
	problem2 "github.com/goda6565/ai-consultant/backend/internal/usecase/problem"
)

// Injectors from wire.go:

func InitAdminApplication(ctx context.Context) (*App, func(), error) {
	environmentEnvironment := environment.ProvideEnvironment()
	logger, cleanup := zap.ProvideZapLogger(environmentEnvironment)
	authenticator := firebase.NewFirebaseClient()
	appPool, cleanup2 := database.ProvideAppPool(ctx, environmentEnvironment)
	documentRepository := document.NewDocumentRepository(appPool)
	storagePort := storage.NewClient(ctx)
	duplicateChecker := service.NewDuplicateCheckService(documentRepository)
	syncQueue, cleanup3 := cloudtasks.NewCloudTasksClient(ctx, environmentEnvironment)
	createDocumentInputPort := document2.NewCreateDocumentUseCase(environmentEnvironment, documentRepository, storagePort, duplicateChecker, syncQueue)
	createDocumentHandler := document3.NewCreateDocumentHandler(createDocumentInputPort)
	vectorPool, cleanup4 := database.ProvideVectorPool(ctx, environmentEnvironment)
	chunkRepository := chunk.NewChunkRepository(vectorPool)
	deleteDocumentInputPort := document2.NewDeleteDocumentUseCase(documentRepository, chunkRepository, storagePort)
	deleteDocumentHandler := document3.NewDeleteDocumentHandler(deleteDocumentInputPort)
	getDocumentInputPort := document2.NewGetDocumentUseCase(documentRepository)
	getDocumentHandler := document3.NewGetDocumentHandler(getDocumentInputPort)
	listDocumentInputPort := document2.NewListDocumentUseCase(documentRepository)
	listDocumentHandler := document3.NewListDocumentHandler(listDocumentInputPort)
	llmClient := gemini.NewGeminiClient(ctx, environmentEnvironment)
	generateTitleService := service2.NewGenerateTitleService(llmClient)
	problemRepository := problem.NewProblemRepository(appPool)
	problemFieldRepository := problemfield.NewProblemFieldRepository(appPool)
	generateProblemFieldService := service3.NewGenerateProblemFieldService(llmClient)
	hearingRepository := hearing.NewHearingRepository(appPool)
	hearingMessageRepository := hearingmessage.NewHearingMessageRepository(appPool)
	adminUnitOfWork := transaction.NewAdminUnitOfWork(ctx, appPool, documentRepository, problemRepository, hearingRepository, hearingMessageRepository, problemFieldRepository)
	createProblemInputPort := problem2.NewCreateProblemUseCase(generateTitleService, problemRepository, problemFieldRepository, generateProblemFieldService, adminUnitOfWork)
	createProblemHandler := problem3.NewCreateProblemHandler(createProblemInputPort)
	deleteProblemInputPort := problem2.NewDeleteProblemUseCase(problemRepository, hearingMessageRepository, hearingRepository, adminUnitOfWork)
	deleteProblemHandler := problem3.NewDeleteProblemHandler(deleteProblemInputPort)
	getProblemInputPort := problem2.NewGetProblemUseCase(problemRepository)
	getProblemHandler := problem3.NewGetProblemHandler(getProblemInputPort)
	listProblemInputPort := problem2.NewListProblemUseCase(problemRepository)
	listProblemHandler := problem3.NewListProblemHandler(listProblemInputPort)
	getHearingInputPort := hearing2.NewGetHearingUseCase(hearingRepository)
	getHearingHandler := hearing3.NewGetHearingHandler(getHearingInputPort)
	listHearingMessageInputPort := hearing_message.NewListHearingMessageUseCase(hearingMessageRepository)
	listHearingMessageHandler := hearingmessage2.NewListHearingMessageHandler(listHearingMessageInputPort)
	strictServerInterface := handler.NewAdminHandlers(createDocumentHandler, deleteDocumentHandler, getDocumentHandler, listDocumentHandler, createProblemHandler, deleteProblemHandler, getProblemHandler, listProblemHandler, getHearingHandler, listHearingMessageHandler)
	router := admin.NewAdminRouter(authenticator, strictServerInterface, environmentEnvironment, logger)
	server := echo.NewBaseServer(environmentEnvironment, logger, router)
	app := &App{
		Server: server,
	}
	return app, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InitVectorApplication(ctx context.Context) (*App, func(), error) {
	environmentEnvironment := environment.ProvideEnvironment()
	logger, cleanup := zap.ProvideZapLogger(environmentEnvironment)
	vectorPool, cleanup2 := database.ProvideVectorPool(ctx, environmentEnvironment)
	chunkRepository := chunk.NewChunkRepository(vectorPool)
	vectorUnitOfWork := transaction.NewVectorUnitOfWork(ctx, vectorPool, chunkRepository)
	appPool, cleanup3 := database.ProvideAppPool(ctx, environmentEnvironment)
	documentRepository := document.NewDocumentRepository(appPool)
	ocrClient := ocr.NewDocumentAIClient(ctx, environmentEnvironment)
	pdfParser := service4.NewPdfParserService(ocrClient)
	llmClient := gemini.NewGeminiClient(ctx, environmentEnvironment)
	csvAnalyzer := service4.NewCsvAnalyzerService(llmClient)
	chunker := service4.NewChunkService()
	storagePort := storage.NewClient(ctx)
	createChunkInputPort := chunk2.NewCreateChunkUseCase(vectorUnitOfWork, documentRepository, pdfParser, csvAnalyzer, chunker, storagePort, llmClient)
	createHandler := chunk3.NewCreateChunkHandler(createChunkInputPort)
	chunkHandlers := chunk3.ChunkHandlers{
		Create: createHandler,
	}
	vectorHandlers := &handler2.VectorHandlers{
		Chunk: chunkHandlers,
	}
	router := vector.NewVectorRouter(vectorHandlers)
	server := echo.NewBaseServer(environmentEnvironment, logger, router)
	app := &App{
		Server: server,
	}
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InitAgentApplication(ctx context.Context) (*App, func(), error) {
	environmentEnvironment := environment.ProvideEnvironment()
	logger, cleanup := zap.ProvideZapLogger(environmentEnvironment)
	authenticator := firebase.NewFirebaseClient()
	appPool, cleanup2 := database.ProvideAppPool(ctx, environmentEnvironment)
	hearingRepository := hearing.NewHearingRepository(appPool)
	hearingMessageRepository := hearingmessage.NewHearingMessageRepository(appPool)
	problemRepository := problem.NewProblemRepository(appPool)
	problemFieldRepository := problemfield.NewProblemFieldRepository(appPool)
	duplicateCheckerService := service5.NewDuplicateCheckerService(hearingRepository)
	llmClient := gemini.NewGeminiClient(ctx, environmentEnvironment)
	generateHearingMessageService := service6.NewGenerateHearingMessageService(llmClient)
	judgeProblemFieldCompletionService := service3.NewJudgeProblemFieldCompletionService(llmClient)
	documentRepository := document.NewDocumentRepository(appPool)
	adminUnitOfWork := transaction.NewAdminUnitOfWork(ctx, appPool, documentRepository, problemRepository, hearingRepository, hearingMessageRepository, problemFieldRepository)
	executeHearingInputPort := hearing2.NewExecuteHearingUseCase(hearingRepository, hearingMessageRepository, problemRepository, problemFieldRepository, duplicateCheckerService, generateHearingMessageService, judgeProblemFieldCompletionService, adminUnitOfWork)
	getProblemInputPort := problem2.NewGetProblemUseCase(problemRepository)
	executeHearingHandler := hearing4.NewExecuteHearingHandler(executeHearingInputPort, getProblemInputPort)
	strictServerInterface := handler3.NewAgentHandlers(executeHearingHandler)
	router := agent.NewAgentRouter(authenticator, strictServerInterface, environmentEnvironment, logger)
	server := echo.NewBaseServer(environmentEnvironment, logger, router)
	app := &App{
		Server: server,
	}
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
