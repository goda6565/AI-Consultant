// Code generated by MockGen. DO NOT EDIT.
// Source: report.go
//
// Generated by this command:
//
//	mockgen -source=report.go -destination=mock/report.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/goda6565/ai-consultant/backend/internal/domain/report/entity"
	value "github.com/goda6565/ai-consultant/backend/internal/domain/shared/value"
	gomock "go.uber.org/mock/gomock"
)

// MockReportRepository is a mock of ReportRepository interface.
type MockReportRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReportRepositoryMockRecorder
	isgomock struct{}
}

// MockReportRepositoryMockRecorder is the mock recorder for MockReportRepository.
type MockReportRepositoryMockRecorder struct {
	mock *MockReportRepository
}

// NewMockReportRepository creates a new mock instance.
func NewMockReportRepository(ctrl *gomock.Controller) *MockReportRepository {
	mock := &MockReportRepository{ctrl: ctrl}
	mock.recorder = &MockReportRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportRepository) EXPECT() *MockReportRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReportRepository) Create(ctx context.Context, report *entity.Report) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReportRepositoryMockRecorder) Create(ctx, report any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReportRepository)(nil).Create), ctx, report)
}

// DeleteByProblemID mocks base method.
func (m *MockReportRepository) DeleteByProblemID(ctx context.Context, problemID value.ID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProblemID", ctx, problemID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByProblemID indicates an expected call of DeleteByProblemID.
func (mr *MockReportRepositoryMockRecorder) DeleteByProblemID(ctx, problemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProblemID", reflect.TypeOf((*MockReportRepository)(nil).DeleteByProblemID), ctx, problemID)
}

// FindByProblemID mocks base method.
func (m *MockReportRepository) FindByProblemID(ctx context.Context, problemID value.ID) (*entity.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProblemID", ctx, problemID)
	ret0, _ := ret[0].(*entity.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProblemID indicates an expected call of FindByProblemID.
func (mr *MockReportRepositoryMockRecorder) FindByProblemID(ctx, problemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProblemID", reflect.TypeOf((*MockReportRepository)(nil).FindByProblemID), ctx, problemID)
}
