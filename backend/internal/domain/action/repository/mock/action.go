// Code generated by MockGen. DO NOT EDIT.
// Source: action.go
//
// Generated by this command:
//
//	mockgen -source=action.go -destination=mock/action.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/goda6565/ai-consultant/backend/internal/domain/action/entity"
	value "github.com/goda6565/ai-consultant/backend/internal/domain/shared/value"
	gomock "go.uber.org/mock/gomock"
)

// MockActionRepository is a mock of ActionRepository interface.
type MockActionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActionRepositoryMockRecorder
	isgomock struct{}
}

// MockActionRepositoryMockRecorder is the mock recorder for MockActionRepository.
type MockActionRepositoryMockRecorder struct {
	mock *MockActionRepository
}

// NewMockActionRepository creates a new mock instance.
func NewMockActionRepository(ctrl *gomock.Controller) *MockActionRepository {
	mock := &MockActionRepository{ctrl: ctrl}
	mock.recorder = &MockActionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionRepository) EXPECT() *MockActionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActionRepository) Create(ctx context.Context, action *entity.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockActionRepositoryMockRecorder) Create(ctx, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActionRepository)(nil).Create), ctx, action)
}

// DeleteByProblemID mocks base method.
func (m *MockActionRepository) DeleteByProblemID(ctx context.Context, problemID value.ID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProblemID", ctx, problemID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByProblemID indicates an expected call of DeleteByProblemID.
func (mr *MockActionRepositoryMockRecorder) DeleteByProblemID(ctx, problemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProblemID", reflect.TypeOf((*MockActionRepository)(nil).DeleteByProblemID), ctx, problemID)
}

// FindByProblemID mocks base method.
func (m *MockActionRepository) FindByProblemID(ctx context.Context, problemID value.ID) ([]entity.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProblemID", ctx, problemID)
	ret0, _ := ret[0].([]entity.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProblemID indicates an expected call of FindByProblemID.
func (mr *MockActionRepositoryMockRecorder) FindByProblemID(ctx, problemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProblemID", reflect.TypeOf((*MockActionRepository)(nil).FindByProblemID), ctx, problemID)
}
