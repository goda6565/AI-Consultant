// Code generated by MockGen. DO NOT EDIT.
// Source: web.go
//
// Generated by this command:
//
//	mockgen -source=web.go -destination=mock/web.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	search "github.com/goda6565/ai-consultant/backend/internal/domain/search"
	gomock "go.uber.org/mock/gomock"
)

// MockWebSearchClient is a mock of WebSearchClient interface.
type MockWebSearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebSearchClientMockRecorder
	isgomock struct{}
}

// MockWebSearchClientMockRecorder is the mock recorder for MockWebSearchClient.
type MockWebSearchClientMockRecorder struct {
	mock *MockWebSearchClient
}

// NewMockWebSearchClient creates a new mock instance.
func NewMockWebSearchClient(ctrl *gomock.Controller) *MockWebSearchClient {
	mock := &MockWebSearchClient{ctrl: ctrl}
	mock.recorder = &MockWebSearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebSearchClient) EXPECT() *MockWebSearchClientMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockWebSearchClient) Search(ctx context.Context, input search.WebSearchInput) (*search.WebSearchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, input)
	ret0, _ := ret[0].(*search.WebSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockWebSearchClientMockRecorder) Search(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockWebSearchClient)(nil).Search), ctx, input)
}
