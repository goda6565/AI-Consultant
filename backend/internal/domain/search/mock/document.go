// Code generated by MockGen. DO NOT EDIT.
// Source: document.go
//
// Generated by this command:
//
//	mockgen -source=document.go -destination=mock/document.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	search "github.com/goda6565/ai-consultant/backend/internal/domain/search"
	gomock "go.uber.org/mock/gomock"
)

// MockDocumentSearchClient is a mock of DocumentSearchClient interface.
type MockDocumentSearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentSearchClientMockRecorder
	isgomock struct{}
}

// MockDocumentSearchClientMockRecorder is the mock recorder for MockDocumentSearchClient.
type MockDocumentSearchClientMockRecorder struct {
	mock *MockDocumentSearchClient
}

// NewMockDocumentSearchClient creates a new mock instance.
func NewMockDocumentSearchClient(ctrl *gomock.Controller) *MockDocumentSearchClient {
	mock := &MockDocumentSearchClient{ctrl: ctrl}
	mock.recorder = &MockDocumentSearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentSearchClient) EXPECT() *MockDocumentSearchClientMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockDocumentSearchClient) Search(ctx context.Context, input search.DocumentSearchInput) (*search.DocumentSearchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, input)
	ret0, _ := ret[0].(*search.DocumentSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDocumentSearchClientMockRecorder) Search(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDocumentSearchClient)(nil).Search), ctx, input)
}
