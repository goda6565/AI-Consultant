// Code generated by MockGen. DO NOT EDIT.
// Source: problem_field.go
//
// Generated by this command:
//
//	mockgen -source=problem_field.go -destination=mock/problem_field.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/goda6565/ai-consultant/backend/internal/domain/problem_field/entity"
	value "github.com/goda6565/ai-consultant/backend/internal/domain/problem_field/value"
	value0 "github.com/goda6565/ai-consultant/backend/internal/domain/shared/value"
	gomock "go.uber.org/mock/gomock"
)

// MockProblemFieldRepository is a mock of ProblemFieldRepository interface.
type MockProblemFieldRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProblemFieldRepositoryMockRecorder
	isgomock struct{}
}

// MockProblemFieldRepositoryMockRecorder is the mock recorder for MockProblemFieldRepository.
type MockProblemFieldRepositoryMockRecorder struct {
	mock *MockProblemFieldRepository
}

// NewMockProblemFieldRepository creates a new mock instance.
func NewMockProblemFieldRepository(ctrl *gomock.Controller) *MockProblemFieldRepository {
	mock := &MockProblemFieldRepository{ctrl: ctrl}
	mock.recorder = &MockProblemFieldRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemFieldRepository) EXPECT() *MockProblemFieldRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProblemFieldRepository) Create(ctx context.Context, problemField *entity.ProblemField) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, problemField)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProblemFieldRepositoryMockRecorder) Create(ctx, problemField any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProblemFieldRepository)(nil).Create), ctx, problemField)
}

// Delete mocks base method.
func (m *MockProblemFieldRepository) Delete(ctx context.Context, id value0.ID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProblemFieldRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProblemFieldRepository)(nil).Delete), ctx, id)
}

// FindByProblemID mocks base method.
func (m *MockProblemFieldRepository) FindByProblemID(ctx context.Context, problemID value0.ID) ([]entity.ProblemField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProblemID", ctx, problemID)
	ret0, _ := ret[0].([]entity.ProblemField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProblemID indicates an expected call of FindByProblemID.
func (mr *MockProblemFieldRepositoryMockRecorder) FindByProblemID(ctx, problemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProblemID", reflect.TypeOf((*MockProblemFieldRepository)(nil).FindByProblemID), ctx, problemID)
}

// UpdateAnswered mocks base method.
func (m *MockProblemFieldRepository) UpdateAnswered(ctx context.Context, id value0.ID, answered value.Answered) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnswered", ctx, id, answered)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAnswered indicates an expected call of UpdateAnswered.
func (mr *MockProblemFieldRepositoryMockRecorder) UpdateAnswered(ctx, id, answered any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswered", reflect.TypeOf((*MockProblemFieldRepository)(nil).UpdateAnswered), ctx, id, answered)
}
