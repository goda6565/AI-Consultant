// Code generated by MockGen. DO NOT EDIT.
// Source: event.go
//
// Generated by this command:
//
//	mockgen -source=event.go -destination=mock/event.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/goda6565/ai-consultant/backend/internal/domain/event/entity"
	value "github.com/goda6565/ai-consultant/backend/internal/domain/shared/value"
	gomock "go.uber.org/mock/gomock"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
	isgomock struct{}
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEventRepository) Create(ctx context.Context, event *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEventRepositoryMockRecorder) Create(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventRepository)(nil).Create), ctx, event)
}

// DeleteAllByProblemID mocks base method.
func (m *MockEventRepository) DeleteAllByProblemID(ctx context.Context, problemID value.ID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllByProblemID", ctx, problemID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllByProblemID indicates an expected call of DeleteAllByProblemID.
func (mr *MockEventRepositoryMockRecorder) DeleteAllByProblemID(ctx, problemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllByProblemID", reflect.TypeOf((*MockEventRepository)(nil).DeleteAllByProblemID), ctx, problemID)
}

// FindAllByProblemID mocks base method.
func (m *MockEventRepository) FindAllByProblemID(ctx context.Context, problemID value.ID) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByProblemID", ctx, problemID)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByProblemID indicates an expected call of FindAllByProblemID.
func (mr *MockEventRepositoryMockRecorder) FindAllByProblemID(ctx, problemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByProblemID", reflect.TypeOf((*MockEventRepository)(nil).FindAllByProblemID), ctx, problemID)
}

// FindAllByProblemIDAsStream mocks base method.
func (m *MockEventRepository) FindAllByProblemIDAsStream(ctx context.Context, problemID value.ID) (<-chan entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByProblemIDAsStream", ctx, problemID)
	ret0, _ := ret[0].(<-chan entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByProblemIDAsStream indicates an expected call of FindAllByProblemIDAsStream.
func (mr *MockEventRepositoryMockRecorder) FindAllByProblemIDAsStream(ctx, problemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByProblemIDAsStream", reflect.TypeOf((*MockEventRepository)(nil).FindAllByProblemIDAsStream), ctx, problemID)
}
