// Code generated by MockGen. DO NOT EDIT.
// Source: hearing.go
//
// Generated by this command:
//
//	mockgen -source=hearing.go -destination=mock/hearing.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/goda6565/ai-consultant/backend/internal/domain/hearing/entity"
	value "github.com/goda6565/ai-consultant/backend/internal/domain/shared/value"
	gomock "go.uber.org/mock/gomock"
)

// MockHearingRepository is a mock of HearingRepository interface.
type MockHearingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHearingRepositoryMockRecorder
	isgomock struct{}
}

// MockHearingRepositoryMockRecorder is the mock recorder for MockHearingRepository.
type MockHearingRepositoryMockRecorder struct {
	mock *MockHearingRepository
}

// NewMockHearingRepository creates a new mock instance.
func NewMockHearingRepository(ctrl *gomock.Controller) *MockHearingRepository {
	mock := &MockHearingRepository{ctrl: ctrl}
	mock.recorder = &MockHearingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHearingRepository) EXPECT() *MockHearingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHearingRepository) Create(ctx context.Context, hearing *entity.Hearing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, hearing)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHearingRepositoryMockRecorder) Create(ctx, hearing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHearingRepository)(nil).Create), ctx, hearing)
}

// DeleteByProblemID mocks base method.
func (m *MockHearingRepository) DeleteByProblemID(ctx context.Context, problemID value.ID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProblemID", ctx, problemID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByProblemID indicates an expected call of DeleteByProblemID.
func (mr *MockHearingRepositoryMockRecorder) DeleteByProblemID(ctx, problemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProblemID", reflect.TypeOf((*MockHearingRepository)(nil).DeleteByProblemID), ctx, problemID)
}

// FindById mocks base method.
func (m *MockHearingRepository) FindById(ctx context.Context, id value.ID) (*entity.Hearing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*entity.Hearing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockHearingRepositoryMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockHearingRepository)(nil).FindById), ctx, id)
}

// FindByProblemId mocks base method.
func (m *MockHearingRepository) FindByProblemId(ctx context.Context, problemID value.ID) (*entity.Hearing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProblemId", ctx, problemID)
	ret0, _ := ret[0].(*entity.Hearing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProblemId indicates an expected call of FindByProblemId.
func (mr *MockHearingRepositoryMockRecorder) FindByProblemId(ctx, problemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProblemId", reflect.TypeOf((*MockHearingRepository)(nil).FindByProblemId), ctx, problemID)
}
