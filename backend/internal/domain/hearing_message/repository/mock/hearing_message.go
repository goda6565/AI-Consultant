// Code generated by MockGen. DO NOT EDIT.
// Source: hearing_message.go
//
// Generated by this command:
//
//	mockgen -source=hearing_message.go -destination=mock/hearing_message.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/goda6565/ai-consultant/backend/internal/domain/hearing_message/entity"
	value "github.com/goda6565/ai-consultant/backend/internal/domain/shared/value"
	gomock "go.uber.org/mock/gomock"
)

// MockHearingMessageRepository is a mock of HearingMessageRepository interface.
type MockHearingMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHearingMessageRepositoryMockRecorder
	isgomock struct{}
}

// MockHearingMessageRepositoryMockRecorder is the mock recorder for MockHearingMessageRepository.
type MockHearingMessageRepositoryMockRecorder struct {
	mock *MockHearingMessageRepository
}

// NewMockHearingMessageRepository creates a new mock instance.
func NewMockHearingMessageRepository(ctrl *gomock.Controller) *MockHearingMessageRepository {
	mock := &MockHearingMessageRepository{ctrl: ctrl}
	mock.recorder = &MockHearingMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHearingMessageRepository) EXPECT() *MockHearingMessageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHearingMessageRepository) Create(ctx context.Context, hearingMessage *entity.HearingMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, hearingMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHearingMessageRepositoryMockRecorder) Create(ctx, hearingMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHearingMessageRepository)(nil).Create), ctx, hearingMessage)
}

// DeleteByHearingID mocks base method.
func (m *MockHearingMessageRepository) DeleteByHearingID(ctx context.Context, hearingID value.ID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByHearingID", ctx, hearingID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByHearingID indicates an expected call of DeleteByHearingID.
func (mr *MockHearingMessageRepositoryMockRecorder) DeleteByHearingID(ctx, hearingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByHearingID", reflect.TypeOf((*MockHearingMessageRepository)(nil).DeleteByHearingID), ctx, hearingID)
}

// FindByHearingID mocks base method.
func (m *MockHearingMessageRepository) FindByHearingID(ctx context.Context, hearingID value.ID) ([]entity.HearingMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHearingID", ctx, hearingID)
	ret0, _ := ret[0].([]entity.HearingMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHearingID indicates an expected call of FindByHearingID.
func (mr *MockHearingMessageRepositoryMockRecorder) FindByHearingID(ctx, hearingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHearingID", reflect.TypeOf((*MockHearingMessageRepository)(nil).FindByHearingID), ctx, hearingID)
}
