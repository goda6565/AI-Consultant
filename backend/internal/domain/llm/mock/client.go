// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mock/client.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	llm "github.com/goda6565/ai-consultant/backend/internal/domain/llm"
	gomock "go.uber.org/mock/gomock"
)

// MockLLMClient is a mock of LLMClient interface.
type MockLLMClient struct {
	ctrl     *gomock.Controller
	recorder *MockLLMClientMockRecorder
	isgomock struct{}
}

// MockLLMClientMockRecorder is the mock recorder for MockLLMClient.
type MockLLMClientMockRecorder struct {
	mock *MockLLMClient
}

// NewMockLLMClient creates a new mock instance.
func NewMockLLMClient(ctrl *gomock.Controller) *MockLLMClient {
	mock := &MockLLMClient{ctrl: ctrl}
	mock.recorder = &MockLLMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMClient) EXPECT() *MockLLMClientMockRecorder {
	return m.recorder
}

// GenerateEmbedding mocks base method.
func (m *MockLLMClient) GenerateEmbedding(ctx context.Context, input llm.GenerateEmbeddingInput) (*llm.GenerateEmbeddingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmbedding", ctx, input)
	ret0, _ := ret[0].(*llm.GenerateEmbeddingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEmbedding indicates an expected call of GenerateEmbedding.
func (mr *MockLLMClientMockRecorder) GenerateEmbedding(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmbedding", reflect.TypeOf((*MockLLMClient)(nil).GenerateEmbedding), ctx, input)
}

// GenerateEmbeddingBatch mocks base method.
func (m *MockLLMClient) GenerateEmbeddingBatch(ctx context.Context, input llm.GenerateEmbeddingBatchInput) (*llm.GenerateEmbeddingBatchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmbeddingBatch", ctx, input)
	ret0, _ := ret[0].(*llm.GenerateEmbeddingBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEmbeddingBatch indicates an expected call of GenerateEmbeddingBatch.
func (mr *MockLLMClientMockRecorder) GenerateEmbeddingBatch(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmbeddingBatch", reflect.TypeOf((*MockLLMClient)(nil).GenerateEmbeddingBatch), ctx, input)
}

// GenerateFunctionCall mocks base method.
func (m *MockLLMClient) GenerateFunctionCall(ctx context.Context, input llm.GenerateFunctionCallInput) (*llm.GenerateFunctionCallOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFunctionCall", ctx, input)
	ret0, _ := ret[0].(*llm.GenerateFunctionCallOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFunctionCall indicates an expected call of GenerateFunctionCall.
func (mr *MockLLMClientMockRecorder) GenerateFunctionCall(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFunctionCall", reflect.TypeOf((*MockLLMClient)(nil).GenerateFunctionCall), ctx, input)
}

// GenerateStructuredText mocks base method.
func (m *MockLLMClient) GenerateStructuredText(ctx context.Context, input llm.GenerateStructuredTextInput) (*llm.GenerateStructuredTextOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateStructuredText", ctx, input)
	ret0, _ := ret[0].(*llm.GenerateStructuredTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateStructuredText indicates an expected call of GenerateStructuredText.
func (mr *MockLLMClientMockRecorder) GenerateStructuredText(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateStructuredText", reflect.TypeOf((*MockLLMClient)(nil).GenerateStructuredText), ctx, input)
}

// GenerateText mocks base method.
func (m *MockLLMClient) GenerateText(ctx context.Context, input llm.GenerateTextInput) (*llm.GenerateTextOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateText", ctx, input)
	ret0, _ := ret[0].(*llm.GenerateTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateText indicates an expected call of GenerateText.
func (mr *MockLLMClientMockRecorder) GenerateText(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateText", reflect.TypeOf((*MockLLMClient)(nil).GenerateText), ctx, input)
}
