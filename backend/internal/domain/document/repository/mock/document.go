// Code generated by MockGen. DO NOT EDIT.
// Source: document.go
//
// Generated by this command:
//
//	mockgen -source=document.go -destination=mock/document.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entity "github.com/goda6565/ai-consultant/backend/internal/domain/document/entity"
	value "github.com/goda6565/ai-consultant/backend/internal/domain/document/value"
	value0 "github.com/goda6565/ai-consultant/backend/internal/domain/shared/value"
	gomock "go.uber.org/mock/gomock"
)

// MockDocumentRepository is a mock of DocumentRepository interface.
type MockDocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentRepositoryMockRecorder
	isgomock struct{}
}

// MockDocumentRepositoryMockRecorder is the mock recorder for MockDocumentRepository.
type MockDocumentRepositoryMockRecorder struct {
	mock *MockDocumentRepository
}

// NewMockDocumentRepository creates a new mock instance.
func NewMockDocumentRepository(ctrl *gomock.Controller) *MockDocumentRepository {
	mock := &MockDocumentRepository{ctrl: ctrl}
	mock.recorder = &MockDocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentRepository) EXPECT() *MockDocumentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDocumentRepository) Create(document *entity.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDocumentRepositoryMockRecorder) Create(document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDocumentRepository)(nil).Create), document)
}

// Delete mocks base method.
func (m *MockDocumentRepository) Delete(id value0.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDocumentRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDocumentRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockDocumentRepository) FindAll() ([]entity.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]entity.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockDocumentRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDocumentRepository)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockDocumentRepository) FindById(id value0.ID) (*entity.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*entity.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockDocumentRepositoryMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockDocumentRepository)(nil).FindById), id)
}

// FindByPath mocks base method.
func (m *MockDocumentRepository) FindByPath(path value.StoragePath) (*entity.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPath", path)
	ret0, _ := ret[0].(*entity.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPath indicates an expected call of FindByPath.
func (mr *MockDocumentRepositoryMockRecorder) FindByPath(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPath", reflect.TypeOf((*MockDocumentRepository)(nil).FindByPath), path)
}

// FindByStatus mocks base method.
func (m *MockDocumentRepository) FindByStatus(status value.DocumentStatus) ([]entity.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStatus", status)
	ret0, _ := ret[0].([]entity.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStatus indicates an expected call of FindByStatus.
func (mr *MockDocumentRepositoryMockRecorder) FindByStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStatus", reflect.TypeOf((*MockDocumentRepository)(nil).FindByStatus), status)
}

// FindByTitle mocks base method.
func (m *MockDocumentRepository) FindByTitle(title value.Title) (*entity.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTitle", title)
	ret0, _ := ret[0].(*entity.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTitle indicates an expected call of FindByTitle.
func (mr *MockDocumentRepositoryMockRecorder) FindByTitle(title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTitle", reflect.TypeOf((*MockDocumentRepository)(nil).FindByTitle), title)
}
