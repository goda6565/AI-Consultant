// Code generated by MockGen. DO NOT EDIT.
// Source: problem.go
//
// Generated by this command:
//
//	mockgen -source=problem.go -destination=mock/problem.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/goda6565/ai-consultant/backend/internal/domain/problem/entity"
	value "github.com/goda6565/ai-consultant/backend/internal/domain/problem/value"
	value0 "github.com/goda6565/ai-consultant/backend/internal/domain/shared/value"
	gomock "go.uber.org/mock/gomock"
)

// MockProblemRepository is a mock of ProblemRepository interface.
type MockProblemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProblemRepositoryMockRecorder
	isgomock struct{}
}

// MockProblemRepositoryMockRecorder is the mock recorder for MockProblemRepository.
type MockProblemRepositoryMockRecorder struct {
	mock *MockProblemRepository
}

// NewMockProblemRepository creates a new mock instance.
func NewMockProblemRepository(ctrl *gomock.Controller) *MockProblemRepository {
	mock := &MockProblemRepository{ctrl: ctrl}
	mock.recorder = &MockProblemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemRepository) EXPECT() *MockProblemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProblemRepository) Create(ctx context.Context, problem *entity.Problem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, problem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProblemRepositoryMockRecorder) Create(ctx, problem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProblemRepository)(nil).Create), ctx, problem)
}

// Delete mocks base method.
func (m *MockProblemRepository) Delete(ctx context.Context, id value0.ID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProblemRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProblemRepository)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockProblemRepository) FindAll(ctx context.Context) ([]entity.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]entity.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockProblemRepositoryMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockProblemRepository)(nil).FindAll), ctx)
}

// FindById mocks base method.
func (m *MockProblemRepository) FindById(ctx context.Context, id value0.ID) (*entity.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*entity.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockProblemRepositoryMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockProblemRepository)(nil).FindById), ctx, id)
}

// UpdateStatus mocks base method.
func (m *MockProblemRepository) UpdateStatus(ctx context.Context, id value0.ID, status value.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockProblemRepositoryMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockProblemRepository)(nil).UpdateStatus), ctx, id, status)
}
