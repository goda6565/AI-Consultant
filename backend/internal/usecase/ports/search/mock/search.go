// Code generated by MockGen. DO NOT EDIT.
// Source: search.go
//
// Generated by this command:
//
//	mockgen -source=search.go -destination=mock/search.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	search "github.com/goda6565/ai-consultant/backend/internal/usecase/ports/search"
	gomock "go.uber.org/mock/gomock"
)

// MockSearchPort is a mock of SearchPort interface.
type MockSearchPort struct {
	ctrl     *gomock.Controller
	recorder *MockSearchPortMockRecorder
	isgomock struct{}
}

// MockSearchPortMockRecorder is the mock recorder for MockSearchPort.
type MockSearchPortMockRecorder struct {
	mock *MockSearchPort
}

// NewMockSearchPort creates a new mock instance.
func NewMockSearchPort(ctrl *gomock.Controller) *MockSearchPort {
	mock := &MockSearchPort{ctrl: ctrl}
	mock.recorder = &MockSearchPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchPort) EXPECT() *MockSearchPortMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockSearchPort) Search(ctx context.Context, input search.SearchInput) (*search.SearchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, input)
	ret0, _ := ret[0].(*search.SearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchPortMockRecorder) Search(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchPort)(nil).Search), ctx, input)
}
