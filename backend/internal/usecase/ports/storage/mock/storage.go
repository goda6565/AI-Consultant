// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=mock/storage.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	value "github.com/goda6565/ai-consultant/backend/internal/domain/document/value"
	gomock "go.uber.org/mock/gomock"
)

// MockStoragePort is a mock of StoragePort interface.
type MockStoragePort struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePortMockRecorder
	isgomock struct{}
}

// MockStoragePortMockRecorder is the mock recorder for MockStoragePort.
type MockStoragePortMockRecorder struct {
	mock *MockStoragePort
}

// NewMockStoragePort creates a new mock instance.
func NewMockStoragePort(ctrl *gomock.Controller) *MockStoragePort {
	mock := &MockStoragePort{ctrl: ctrl}
	mock.recorder = &MockStoragePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePort) EXPECT() *MockStoragePortMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStoragePort) Delete(ctx context.Context, info value.StorageInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoragePortMockRecorder) Delete(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStoragePort)(nil).Delete), ctx, info)
}

// Download mocks base method.
func (m *MockStoragePort) Download(ctx context.Context, info value.StorageInfo) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, info)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockStoragePortMockRecorder) Download(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockStoragePort)(nil).Download), ctx, info)
}

// Upload mocks base method.
func (m *MockStoragePort) Upload(ctx context.Context, info value.StorageInfo, reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, info, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockStoragePortMockRecorder) Upload(ctx, info, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStoragePort)(nil).Upload), ctx, info, reader)
}
