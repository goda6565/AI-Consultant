// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ActionType.
const (
	ActionTypeAnalyze ActionType = "analyze"
	ActionTypeDone    ActionType = "done"
	ActionTypePlan    ActionType = "plan"
	ActionTypeReview  ActionType = "review"
	ActionTypeSearch  ActionType = "search"
	ActionTypeWrite   ActionType = "write"
)

// Defines values for DocumentStatus.
const (
	DocumentStatusDone       DocumentStatus = "done"
	DocumentStatusFailed     DocumentStatus = "failed"
	DocumentStatusProcessing DocumentStatus = "processing"
)

// Defines values for DocumentType.
const (
	Csv      DocumentType = "csv"
	Markdown DocumentType = "markdown"
	Pdf      DocumentType = "pdf"
)

// Defines values for ErrorCode.
const (
	N400 ErrorCode = 400
	N401 ErrorCode = 401
	N403 ErrorCode = 403
	N404 ErrorCode = 404
	N409 ErrorCode = 409
	N500 ErrorCode = 500
)

// Defines values for EventType.
const (
	Action EventType = "action"
	Input  EventType = "input"
	Output EventType = "output"
)

// Defines values for HearingMessageRole.
const (
	Assistant HearingMessageRole = "assistant"
	User      HearingMessageRole = "user"
)

// Defines values for ProblemStatus.
const (
	ProblemStatusDone       ProblemStatus = "done"
	ProblemStatusFailed     ProblemStatus = "failed"
	ProblemStatusHearing    ProblemStatus = "hearing"
	ProblemStatusPending    ProblemStatus = "pending"
	ProblemStatusProcessing ProblemStatus = "processing"
)

// Document defines model for Document.
type Document struct {
	BucketName     string             `json:"bucketName"`
	CreatedAt      time.Time          `json:"createdAt"`
	DocumentStatus DocumentStatus     `json:"documentStatus"`
	DocumentType   DocumentType       `json:"documentType"`
	Id             openapi_types.UUID `json:"id"`
	ObjectName     string             `json:"objectName"`
	RetryCount     int                `json:"retryCount"`
	Title          string             `json:"title"`
	UpdatedAt      time.Time          `json:"updatedAt"`
}

// Event defines model for Event.
type Event struct {
	ActionType ActionType         `json:"actionType"`
	EventType  EventType          `json:"eventType"`
	Id         openapi_types.UUID `json:"id"`
	Message    string             `json:"message"`
}

// Hearing defines model for Hearing.
type Hearing struct {
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	ProblemId openapi_types.UUID `json:"problemId"`
}

// HearingMessage defines model for HearingMessage.
type HearingMessage struct {
	CreatedAt      time.Time          `json:"createdAt"`
	HearingId      openapi_types.UUID `json:"hearingId"`
	Id             openapi_types.UUID `json:"id"`
	Message        string             `json:"message"`
	ProblemFieldId openapi_types.UUID `json:"problemFieldId"`
	Role           HearingMessageRole `json:"role"`
}

// Problem defines model for Problem.
type Problem struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Status      ProblemStatus      `json:"status"`
	Title       string             `json:"title"`
}

// Report defines model for Report.
type Report struct {
	Content   string             `json:"content"`
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	ProblemId openapi_types.UUID `json:"problemId"`
}

// ActionType defines model for actionType.
type ActionType string

// DocumentStatus defines model for documentStatus.
type DocumentStatus string

// DocumentType defines model for documentType.
type DocumentType string

// ErrorCode defines model for errorCode.
type ErrorCode int

// EventType defines model for eventType.
type EventType string

// HearingMessageRole defines model for hearingMessageRole.
type HearingMessageRole string

// ProblemStatus defines model for problemStatus.
type ProblemStatus string

// DocumentIdPathParameter defines model for DocumentIdPathParameter.
type DocumentIdPathParameter = openapi_types.UUID

// HearingIdPathParameter defines model for HearingIdPathParameter.
type HearingIdPathParameter = openapi_types.UUID

// ProblemIdPathParameter defines model for ProblemIdPathParameter.
type ProblemIdPathParameter = openapi_types.UUID

// CreateDocumentSuccess defines model for CreateDocumentSuccess.
type CreateDocumentSuccess struct {
	Id openapi_types.UUID `json:"id"`
}

// CreateHearingSuccess defines model for CreateHearingSuccess.
type CreateHearingSuccess struct {
	HearingId openapi_types.UUID `json:"hearingId"`
}

// CreateProblemSuccess defines model for CreateProblemSuccess.
type CreateProblemSuccess struct {
	Id openapi_types.UUID `json:"id"`
}

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// GetDocumentSuccess defines model for GetDocumentSuccess.
type GetDocumentSuccess = Document

// GetHearingSuccess defines model for GetHearingSuccess.
type GetHearingSuccess = Hearing

// GetProblemSuccess defines model for GetProblemSuccess.
type GetProblemSuccess = Problem

// GetReportSuccess defines model for GetReportSuccess.
type GetReportSuccess = Report

// ListDocumentsSuccess defines model for ListDocumentsSuccess.
type ListDocumentsSuccess struct {
	Documents []Document `json:"documents"`
}

// ListEventsSuccess defines model for ListEventsSuccess.
type ListEventsSuccess struct {
	Events []Event `json:"events"`
}

// ListHearingMessagesSuccess defines model for ListHearingMessagesSuccess.
type ListHearingMessagesSuccess struct {
	HearingMessages []HearingMessage `json:"hearingMessages"`
}

// ListProblemsSuccess defines model for ListProblemsSuccess.
type ListProblemsSuccess struct {
	Problems []Problem `json:"problems"`
}

// CreateDocument defines model for CreateDocument.
type CreateDocument struct {
	// Data File data in base64
	Data         []byte       `json:"data"`
	DocumentType DocumentType `json:"documentType"`
	Title        string       `json:"title"`
}

// CreateProblem defines model for CreateProblem.
type CreateProblem struct {
	Description string `json:"description"`
}

// CreateDocumentJSONBody defines parameters for CreateDocument.
type CreateDocumentJSONBody struct {
	// Data File data in base64
	Data         []byte       `json:"data"`
	DocumentType DocumentType `json:"documentType"`
	Title        string       `json:"title"`
}

// CreateProblemJSONBody defines parameters for CreateProblem.
type CreateProblemJSONBody struct {
	Description string `json:"description"`
}

// CreateDocumentJSONRequestBody defines body for CreateDocument for application/json ContentType.
type CreateDocumentJSONRequestBody CreateDocumentJSONBody

// CreateProblemJSONRequestBody defines body for CreateProblem for application/json ContentType.
type CreateProblemJSONRequestBody CreateProblemJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List documents
	// (GET /api/documents)
	ListDocuments(ctx echo.Context) error
	// Create a document
	// (POST /api/documents)
	CreateDocument(ctx echo.Context) error
	// Delete a document by document id
	// (DELETE /api/documents/{documentId})
	DeleteDocument(ctx echo.Context, documentId DocumentIdPathParameter) error
	// Get a document by document id
	// (GET /api/documents/{documentId})
	GetDocument(ctx echo.Context, documentId DocumentIdPathParameter) error
	// List events by problem id
	// (GET /api/events/{problemId})
	ListEvents(ctx echo.Context, problemId ProblemIdPathParameter) error
	// List hearing messages by hearing id
	// (GET /api/hearings/{hearingId}/messages)
	ListHearingMessages(ctx echo.Context, hearingId HearingIdPathParameter) error
	// Get a hearing by problem id
	// (GET /api/hearings/{problemId})
	GetHearing(ctx echo.Context, problemId ProblemIdPathParameter) error
	// Create a hearing
	// (POST /api/hearings/{problemId})
	CreateHearing(ctx echo.Context, problemId ProblemIdPathParameter) error
	// List problems
	// (GET /api/problems)
	ListProblems(ctx echo.Context) error
	// Create a problem
	// (POST /api/problems)
	CreateProblem(ctx echo.Context) error
	// Delete a problem by problem id
	// (DELETE /api/problems/{problemId})
	DeleteProblem(ctx echo.Context, problemId ProblemIdPathParameter) error
	// Get a problem by problem id
	// (GET /api/problems/{problemId})
	GetProblem(ctx echo.Context, problemId ProblemIdPathParameter) error
	// Get a report by problem id
	// (GET /api/reports/{problemId})
	GetReport(ctx echo.Context, problemId ProblemIdPathParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) ListDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDocuments(ctx)
	return err
}

// CreateDocument converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "documentId" -------------
	var documentId DocumentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "documentId", ctx.Param("documentId"), &documentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter documentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDocument(ctx, documentId)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "documentId" -------------
	var documentId DocumentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "documentId", ctx.Param("documentId"), &documentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter documentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDocument(ctx, documentId)
	return err
}

// ListEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "problemId" -------------
	var problemId ProblemIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "problemId", ctx.Param("problemId"), &problemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter problemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListEvents(ctx, problemId)
	return err
}

// ListHearingMessages converts echo context to params.
func (w *ServerInterfaceWrapper) ListHearingMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hearingId" -------------
	var hearingId HearingIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "hearingId", ctx.Param("hearingId"), &hearingId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hearingId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListHearingMessages(ctx, hearingId)
	return err
}

// GetHearing converts echo context to params.
func (w *ServerInterfaceWrapper) GetHearing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "problemId" -------------
	var problemId ProblemIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "problemId", ctx.Param("problemId"), &problemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter problemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHearing(ctx, problemId)
	return err
}

// CreateHearing converts echo context to params.
func (w *ServerInterfaceWrapper) CreateHearing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "problemId" -------------
	var problemId ProblemIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "problemId", ctx.Param("problemId"), &problemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter problemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateHearing(ctx, problemId)
	return err
}

// ListProblems converts echo context to params.
func (w *ServerInterfaceWrapper) ListProblems(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListProblems(ctx)
	return err
}

// CreateProblem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProblem(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProblem(ctx)
	return err
}

// DeleteProblem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProblem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "problemId" -------------
	var problemId ProblemIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "problemId", ctx.Param("problemId"), &problemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter problemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProblem(ctx, problemId)
	return err
}

// GetProblem converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "problemId" -------------
	var problemId ProblemIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "problemId", ctx.Param("problemId"), &problemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter problemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProblem(ctx, problemId)
	return err
}

// GetReport converts echo context to params.
func (w *ServerInterfaceWrapper) GetReport(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "problemId" -------------
	var problemId ProblemIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "problemId", ctx.Param("problemId"), &problemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter problemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReport(ctx, problemId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/documents", wrapper.ListDocuments)
	router.POST(baseURL+"/api/documents", wrapper.CreateDocument)
	router.DELETE(baseURL+"/api/documents/:documentId", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/documents/:documentId", wrapper.GetDocument)
	router.GET(baseURL+"/api/events/:problemId", wrapper.ListEvents)
	router.GET(baseURL+"/api/hearings/:hearingId/messages", wrapper.ListHearingMessages)
	router.GET(baseURL+"/api/hearings/:problemId", wrapper.GetHearing)
	router.POST(baseURL+"/api/hearings/:problemId", wrapper.CreateHearing)
	router.GET(baseURL+"/api/problems", wrapper.ListProblems)
	router.POST(baseURL+"/api/problems", wrapper.CreateProblem)
	router.DELETE(baseURL+"/api/problems/:problemId", wrapper.DeleteProblem)
	router.GET(baseURL+"/api/problems/:problemId", wrapper.GetProblem)
	router.GET(baseURL+"/api/reports/:problemId", wrapper.GetReport)

}

type CreateDocumentSuccessJSONResponse struct {
	Id openapi_types.UUID `json:"id"`
}

type CreateHearingSuccessJSONResponse struct {
	HearingId openapi_types.UUID `json:"hearingId"`
}

type CreateProblemSuccessJSONResponse struct {
	Id openapi_types.UUID `json:"id"`
}

type ErrorJSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

type GetDocumentSuccessJSONResponse Document

type GetHearingSuccessJSONResponse Hearing

type GetProblemSuccessJSONResponse Problem

type GetReportSuccessJSONResponse Report

type ListDocumentsSuccessJSONResponse struct {
	Documents []Document `json:"documents"`
}

type ListEventsSuccessJSONResponse struct {
	Events []Event `json:"events"`
}

type ListHearingMessagesSuccessJSONResponse struct {
	HearingMessages []HearingMessage `json:"hearingMessages"`
}

type ListProblemsSuccessJSONResponse struct {
	Problems []Problem `json:"problems"`
}

type ListDocumentsRequestObject struct {
}

type ListDocumentsResponseObject interface {
	VisitListDocumentsResponse(w http.ResponseWriter) error
}

type ListDocuments200JSONResponse struct {
	ListDocumentsSuccessJSONResponse
}

func (response ListDocuments200JSONResponse) VisitListDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDocuments400JSONResponse struct{ ErrorJSONResponse }

func (response ListDocuments400JSONResponse) VisitListDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListDocuments401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListDocuments401JSONResponse) VisitListDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListDocuments403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListDocuments403JSONResponse) VisitListDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListDocuments500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListDocuments500JSONResponse) VisitListDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocumentRequestObject struct {
	Body *CreateDocumentJSONRequestBody
}

type CreateDocumentResponseObject interface {
	VisitCreateDocumentResponse(w http.ResponseWriter) error
}

type CreateDocument201JSONResponse struct {
	CreateDocumentSuccessJSONResponse
}

func (response CreateDocument201JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocument400JSONResponse struct{ ErrorJSONResponse }

func (response CreateDocument400JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocument401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateDocument401JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocument403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateDocument403JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocument409JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateDocument409JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocument500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateDocument500JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDocumentRequestObject struct {
	DocumentId DocumentIdPathParameter `json:"documentId"`
}

type DeleteDocumentResponseObject interface {
	VisitDeleteDocumentResponse(w http.ResponseWriter) error
}

type DeleteDocument204Response struct {
}

func (response DeleteDocument204Response) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDocument400JSONResponse struct{ ErrorJSONResponse }

func (response DeleteDocument400JSONResponse) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDocument401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteDocument401JSONResponse) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDocument403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteDocument403JSONResponse) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDocument404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteDocument404JSONResponse) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDocument500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteDocument500JSONResponse) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDocumentRequestObject struct {
	DocumentId DocumentIdPathParameter `json:"documentId"`
}

type GetDocumentResponseObject interface {
	VisitGetDocumentResponse(w http.ResponseWriter) error
}

type GetDocument200JSONResponse struct{ GetDocumentSuccessJSONResponse }

func (response GetDocument200JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDocument400JSONResponse struct{ ErrorJSONResponse }

func (response GetDocument400JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDocument401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetDocument401JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDocument403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetDocument403JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDocument404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetDocument404JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDocument500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetDocument500JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListEventsRequestObject struct {
	ProblemId ProblemIdPathParameter `json:"problemId"`
}

type ListEventsResponseObject interface {
	VisitListEventsResponse(w http.ResponseWriter) error
}

type ListEvents200JSONResponse struct{ ListEventsSuccessJSONResponse }

func (response ListEvents200JSONResponse) VisitListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListEvents400JSONResponse struct{ ErrorJSONResponse }

func (response ListEvents400JSONResponse) VisitListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListEvents401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListEvents401JSONResponse) VisitListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListEvents403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListEvents403JSONResponse) VisitListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListEvents404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListEvents404JSONResponse) VisitListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListEvents500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListEvents500JSONResponse) VisitListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListHearingMessagesRequestObject struct {
	HearingId HearingIdPathParameter `json:"hearingId"`
}

type ListHearingMessagesResponseObject interface {
	VisitListHearingMessagesResponse(w http.ResponseWriter) error
}

type ListHearingMessages200JSONResponse struct {
	ListHearingMessagesSuccessJSONResponse
}

func (response ListHearingMessages200JSONResponse) VisitListHearingMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListHearingMessages400JSONResponse struct{ ErrorJSONResponse }

func (response ListHearingMessages400JSONResponse) VisitListHearingMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListHearingMessages401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListHearingMessages401JSONResponse) VisitListHearingMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListHearingMessages403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListHearingMessages403JSONResponse) VisitListHearingMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListHearingMessages404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListHearingMessages404JSONResponse) VisitListHearingMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListHearingMessages500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListHearingMessages500JSONResponse) VisitListHearingMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetHearingRequestObject struct {
	ProblemId ProblemIdPathParameter `json:"problemId"`
}

type GetHearingResponseObject interface {
	VisitGetHearingResponse(w http.ResponseWriter) error
}

type GetHearing200JSONResponse struct{ GetHearingSuccessJSONResponse }

func (response GetHearing200JSONResponse) VisitGetHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHearing400JSONResponse struct{ ErrorJSONResponse }

func (response GetHearing400JSONResponse) VisitGetHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHearing401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetHearing401JSONResponse) VisitGetHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetHearing403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetHearing403JSONResponse) VisitGetHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetHearing404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetHearing404JSONResponse) VisitGetHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetHearing500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetHearing500JSONResponse) VisitGetHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateHearingRequestObject struct {
	ProblemId ProblemIdPathParameter `json:"problemId"`
}

type CreateHearingResponseObject interface {
	VisitCreateHearingResponse(w http.ResponseWriter) error
}

type CreateHearing201JSONResponse struct {
	CreateHearingSuccessJSONResponse
}

func (response CreateHearing201JSONResponse) VisitCreateHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateHearing400JSONResponse struct{ ErrorJSONResponse }

func (response CreateHearing400JSONResponse) VisitCreateHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateHearing401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateHearing401JSONResponse) VisitCreateHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateHearing403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateHearing403JSONResponse) VisitCreateHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateHearing409JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateHearing409JSONResponse) VisitCreateHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateHearing500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateHearing500JSONResponse) VisitCreateHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProblemsRequestObject struct {
}

type ListProblemsResponseObject interface {
	VisitListProblemsResponse(w http.ResponseWriter) error
}

type ListProblems200JSONResponse struct {
	ListProblemsSuccessJSONResponse
}

func (response ListProblems200JSONResponse) VisitListProblemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProblems400JSONResponse struct{ ErrorJSONResponse }

func (response ListProblems400JSONResponse) VisitListProblemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListProblems401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListProblems401JSONResponse) VisitListProblemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListProblems403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListProblems403JSONResponse) VisitListProblemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProblems500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListProblems500JSONResponse) VisitListProblemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblemRequestObject struct {
	Body *CreateProblemJSONRequestBody
}

type CreateProblemResponseObject interface {
	VisitCreateProblemResponse(w http.ResponseWriter) error
}

type CreateProblem201JSONResponse struct {
	CreateProblemSuccessJSONResponse
}

func (response CreateProblem201JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblem400JSONResponse struct{ ErrorJSONResponse }

func (response CreateProblem400JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblem401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateProblem401JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblem403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateProblem403JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblem409JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateProblem409JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblem500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateProblem500JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProblemRequestObject struct {
	ProblemId ProblemIdPathParameter `json:"problemId"`
}

type DeleteProblemResponseObject interface {
	VisitDeleteProblemResponse(w http.ResponseWriter) error
}

type DeleteProblem204Response struct {
}

func (response DeleteProblem204Response) VisitDeleteProblemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProblem400JSONResponse struct{ ErrorJSONResponse }

func (response DeleteProblem400JSONResponse) VisitDeleteProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProblem401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteProblem401JSONResponse) VisitDeleteProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProblem403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteProblem403JSONResponse) VisitDeleteProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProblem404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteProblem404JSONResponse) VisitDeleteProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProblem500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteProblem500JSONResponse) VisitDeleteProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProblemRequestObject struct {
	ProblemId ProblemIdPathParameter `json:"problemId"`
}

type GetProblemResponseObject interface {
	VisitGetProblemResponse(w http.ResponseWriter) error
}

type GetProblem200JSONResponse struct{ GetProblemSuccessJSONResponse }

func (response GetProblem200JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem400JSONResponse struct{ ErrorJSONResponse }

func (response GetProblem400JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetProblem401JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetProblem403JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetProblem404JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetProblem500JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetReportRequestObject struct {
	ProblemId ProblemIdPathParameter `json:"problemId"`
}

type GetReportResponseObject interface {
	VisitGetReportResponse(w http.ResponseWriter) error
}

type GetReport200JSONResponse struct{ GetReportSuccessJSONResponse }

func (response GetReport200JSONResponse) VisitGetReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetReport400JSONResponse struct{ ErrorJSONResponse }

func (response GetReport400JSONResponse) VisitGetReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetReport401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetReport401JSONResponse) VisitGetReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetReport403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetReport403JSONResponse) VisitGetReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetReport404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetReport404JSONResponse) VisitGetReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetReport500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetReport500JSONResponse) VisitGetReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List documents
	// (GET /api/documents)
	ListDocuments(ctx context.Context, request ListDocumentsRequestObject) (ListDocumentsResponseObject, error)
	// Create a document
	// (POST /api/documents)
	CreateDocument(ctx context.Context, request CreateDocumentRequestObject) (CreateDocumentResponseObject, error)
	// Delete a document by document id
	// (DELETE /api/documents/{documentId})
	DeleteDocument(ctx context.Context, request DeleteDocumentRequestObject) (DeleteDocumentResponseObject, error)
	// Get a document by document id
	// (GET /api/documents/{documentId})
	GetDocument(ctx context.Context, request GetDocumentRequestObject) (GetDocumentResponseObject, error)
	// List events by problem id
	// (GET /api/events/{problemId})
	ListEvents(ctx context.Context, request ListEventsRequestObject) (ListEventsResponseObject, error)
	// List hearing messages by hearing id
	// (GET /api/hearings/{hearingId}/messages)
	ListHearingMessages(ctx context.Context, request ListHearingMessagesRequestObject) (ListHearingMessagesResponseObject, error)
	// Get a hearing by problem id
	// (GET /api/hearings/{problemId})
	GetHearing(ctx context.Context, request GetHearingRequestObject) (GetHearingResponseObject, error)
	// Create a hearing
	// (POST /api/hearings/{problemId})
	CreateHearing(ctx context.Context, request CreateHearingRequestObject) (CreateHearingResponseObject, error)
	// List problems
	// (GET /api/problems)
	ListProblems(ctx context.Context, request ListProblemsRequestObject) (ListProblemsResponseObject, error)
	// Create a problem
	// (POST /api/problems)
	CreateProblem(ctx context.Context, request CreateProblemRequestObject) (CreateProblemResponseObject, error)
	// Delete a problem by problem id
	// (DELETE /api/problems/{problemId})
	DeleteProblem(ctx context.Context, request DeleteProblemRequestObject) (DeleteProblemResponseObject, error)
	// Get a problem by problem id
	// (GET /api/problems/{problemId})
	GetProblem(ctx context.Context, request GetProblemRequestObject) (GetProblemResponseObject, error)
	// Get a report by problem id
	// (GET /api/reports/{problemId})
	GetReport(ctx context.Context, request GetReportRequestObject) (GetReportResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListDocuments operation middleware
func (sh *strictHandler) ListDocuments(ctx echo.Context) error {
	var request ListDocumentsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListDocuments(ctx.Request().Context(), request.(ListDocumentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDocuments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListDocumentsResponseObject); ok {
		return validResponse.VisitListDocumentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateDocument operation middleware
func (sh *strictHandler) CreateDocument(ctx echo.Context) error {
	var request CreateDocumentRequestObject

	var body CreateDocumentJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDocument(ctx.Request().Context(), request.(CreateDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDocument")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateDocumentResponseObject); ok {
		return validResponse.VisitCreateDocumentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteDocument operation middleware
func (sh *strictHandler) DeleteDocument(ctx echo.Context, documentId DocumentIdPathParameter) error {
	var request DeleteDocumentRequestObject

	request.DocumentId = documentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDocument(ctx.Request().Context(), request.(DeleteDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDocument")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteDocumentResponseObject); ok {
		return validResponse.VisitDeleteDocumentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDocument operation middleware
func (sh *strictHandler) GetDocument(ctx echo.Context, documentId DocumentIdPathParameter) error {
	var request GetDocumentRequestObject

	request.DocumentId = documentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDocument(ctx.Request().Context(), request.(GetDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDocument")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDocumentResponseObject); ok {
		return validResponse.VisitGetDocumentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListEvents operation middleware
func (sh *strictHandler) ListEvents(ctx echo.Context, problemId ProblemIdPathParameter) error {
	var request ListEventsRequestObject

	request.ProblemId = problemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListEvents(ctx.Request().Context(), request.(ListEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListEventsResponseObject); ok {
		return validResponse.VisitListEventsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListHearingMessages operation middleware
func (sh *strictHandler) ListHearingMessages(ctx echo.Context, hearingId HearingIdPathParameter) error {
	var request ListHearingMessagesRequestObject

	request.HearingId = hearingId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListHearingMessages(ctx.Request().Context(), request.(ListHearingMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListHearingMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListHearingMessagesResponseObject); ok {
		return validResponse.VisitListHearingMessagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetHearing operation middleware
func (sh *strictHandler) GetHearing(ctx echo.Context, problemId ProblemIdPathParameter) error {
	var request GetHearingRequestObject

	request.ProblemId = problemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHearing(ctx.Request().Context(), request.(GetHearingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHearing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetHearingResponseObject); ok {
		return validResponse.VisitGetHearingResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateHearing operation middleware
func (sh *strictHandler) CreateHearing(ctx echo.Context, problemId ProblemIdPathParameter) error {
	var request CreateHearingRequestObject

	request.ProblemId = problemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateHearing(ctx.Request().Context(), request.(CreateHearingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateHearing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateHearingResponseObject); ok {
		return validResponse.VisitCreateHearingResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListProblems operation middleware
func (sh *strictHandler) ListProblems(ctx echo.Context) error {
	var request ListProblemsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListProblems(ctx.Request().Context(), request.(ListProblemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProblems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListProblemsResponseObject); ok {
		return validResponse.VisitListProblemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateProblem operation middleware
func (sh *strictHandler) CreateProblem(ctx echo.Context) error {
	var request CreateProblemRequestObject

	var body CreateProblemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProblem(ctx.Request().Context(), request.(CreateProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateProblemResponseObject); ok {
		return validResponse.VisitCreateProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProblem operation middleware
func (sh *strictHandler) DeleteProblem(ctx echo.Context, problemId ProblemIdPathParameter) error {
	var request DeleteProblemRequestObject

	request.ProblemId = problemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProblem(ctx.Request().Context(), request.(DeleteProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteProblemResponseObject); ok {
		return validResponse.VisitDeleteProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProblem operation middleware
func (sh *strictHandler) GetProblem(ctx echo.Context, problemId ProblemIdPathParameter) error {
	var request GetProblemRequestObject

	request.ProblemId = problemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProblem(ctx.Request().Context(), request.(GetProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProblemResponseObject); ok {
		return validResponse.VisitGetProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetReport operation middleware
func (sh *strictHandler) GetReport(ctx echo.Context, problemId ProblemIdPathParameter) error {
	var request GetReportRequestObject

	request.ProblemId = problemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetReport(ctx.Request().Context(), request.(GetReportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReport")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetReportResponseObject); ok {
		return validResponse.VisitGetReportResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbW2/bNhT+KwK3RzZWF3dA/ZambZphLYK2wB6CPNDSSaxWt5FUCs/Qfx8oUiQlSjYV",
	"O6iH+c2RyMNz+c6VygZFRVYWOeScocUGlYSSDDjQ5q+3RVRlkPPr+Ibw1U37TryKgUU0KXlS5GihFwbX",
	"bxFGiXhUEr5CGOUkA7RAsaaEMKLwd5VQiNGC0wowYtEKMiKo3hc0IxwtUFUlYiVfl2I34zTJH1BdY/QB",
	"iPi9kyO1bpShVUtnT35uaLFMIdvJj1o3yk/Z0tmLn1puBsbfFHECjREvKRAOrYXEk6jIufpJyjJNIiKY",
	"nH1jgtONdVxJixIoV4Riwokr2PskhUC8CpI8WBIGv88RNowu1xxcRrEGxNfmxQb9SuEeLdAvM4PHmWSE",
	"zTpra4x4wtNmk2sOo7pbtax3FJZi3GmWiuU3iLjRnVF8jZXulO32UZ2tsl1824u9+GyesLLI2ZDFv1RR",
	"BIztwX0S+/mCLUQSj/DeRY9kNWhNFLRyIK185cj7S2E8frIwZusEmdSmAZEUnv4LhlFhqSPEO0oLugfX",
	"URHvdHkQZ1yKhTVGGTBGHjw8vl2I5Rk+ckphaoyugO/jMduE0bF34Pwr4MPovwK+B/S3saPIjnEzhNsr",
	"4HuAdhszbWwdYWYIf1fAP0NZ0IPbSVIdY4U2bzuc/JkwDRq2vzu3OJC+zSFj/sjSUCeUkrWbUzRpH6cQ",
	"cmlUMkfkd4+HkRceJwnbHLtTUkXUW0zBUsFIGsiNjrDKWz7K0MIOlodagt7idxnZqYf+Md4Kaf1fBVNX",
	"I8plD6AK5d3+OtDRYofwmvAUGDQ7LGnrtvLu9EKuFMsq+g78U1PHb9xKN2oyaXzBO7k6Jhxe8CTbWhx/",
	"4YRXzLc8Vqv3LK69agqs1DkqNAVO15dFJfWlXic5hweg20p4jKoynqYut77BY6W/ZamOBI7GOwLYJrT5",
	"c7GFkYxRDkRIJLDmYw5rZY1lMPPZZhb6m9C7rGq2mxOwLY4hM6SOttRwa8DpTuEplWmkn1Ia404jbrjc",
	"ItxHo8a9ZZzSoxzAzlra9wmkseeptEh3wrGbfD6LHYPKtqcwPVbUQdgu6reaw+rS97bD9n7dW/PMK34r",
	"wU349pxvdCOdxbE+eJfKVME70KHpdH6IdPYzPFdJsEsD3cAMeZU15UNKGi0CodFKxLucpOt/hGw/aNLM",
	"syg8JvCjSRy5Hfq25XBNnRaibhLr1H6M7kmSQryVkMNkfC+8g9DvcfFDsBuxx0ECppc2u+dhiOfhSzwP",
	"z/E8nON5+Bq/CkOz3crVnSTUni4V18wyy0rouai4+HE3HtXsaGBRqhhQoWPGEsZJPkyi6yO2FiCPpSbV",
	"KRII/goWbgpRRRO+/iIcUnrAGyAU6EXFV02F1/z1voXkH399Rao2FJTkW4PRFeelrDOT/L5wJ6YX1y8u",
	"i5xVqZA2uIizJA8ubq61M29b8QiUSSovz8KzsKnESshJmaAFOj8Lz86F/ISvGilmpExmna7yARq/Fc7e",
	"lOjC2bptLOoNE38Lw7EAptfNBhvhGqO5z2Y9gpmHLyetPp+w+tUETixIoMVtFwy3d/UdRqzKMkLXTqss",
	"bEgeWK/jFvgt2IDie6N5e3i/HufWmu/PehRqx3geGh0eFx+V9ebh6yOwtZqJEm3vEXPXuOd5s425/6pl",
	"QEiBgwuIt81zCxD2fdztsEhmyWzsvk6I0cPF3I1Ln4pApc1A8hcwiYX7Kk3XxwaI+REAQprLAkSwXJvf",
	"sm4ZDAeDYdiaQD+n5T1UMTALP1nfsf4V8Mmmb0ODHDbONrpmra3s3LuhEEuDDwnjBV0HxX3QNjp4II3L",
	"0exk+IzcYj8NPe6I+ASe4bpBjZyXa33P0QFOO8rWqFElLpttdONczzJrkDxa3vWm2JMBMvLZxdMBMjJW",
	"PyFlGCnOUH651s86mHHG/gPgGQw6Ti76YPqpnxdL3FvQE0JGElELh7Fo0tp/Zz/y/Ib3bkqO2/ZH1ZOY",
	"8ceAwdsYYF+4jeaK9n7vyZOA/gXh/2cQUBrVtVYwV5E73M6UdU+cAliXo0/1t95HHid/G/e3UptrwNJ9",
	"f+vn3O39v0HCcwXgU/d/yO6/TbdjmbcTAsbKrec3ul+5ddwh4HjKrQlGb6OB/ILMuwBXt3M/GxDdb+1O",
	"eBjBg/o8cAwOyvYCDbV+uun/e4TQ76b3LwGdZ7qmc5/pls96pSYI1pOWj/qu/jcAAP//BVl6fPwxAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
