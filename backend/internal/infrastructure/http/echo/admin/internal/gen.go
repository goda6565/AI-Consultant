// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for DocumentExtension.
const (
	Csv      DocumentExtension = "csv"
	Markdown DocumentExtension = "markdown"
	Pdf      DocumentExtension = "pdf"
)

// Defines values for DocumentStatus.
const (
	DocumentStatusDone       DocumentStatus = "done"
	DocumentStatusFailed     DocumentStatus = "failed"
	DocumentStatusProcessing DocumentStatus = "processing"
)

// Defines values for ErrorCode.
const (
	N400 ErrorCode = 400
	N401 ErrorCode = 401
	N403 ErrorCode = 403
	N404 ErrorCode = 404
	N409 ErrorCode = 409
	N500 ErrorCode = 500
)

// Defines values for SyncStep.
const (
	SyncStepDone    SyncStep = "done"
	SyncStepPending SyncStep = "pending"
	SyncStepVector  SyncStep = "vector"
)

// Document defines model for Document.
type Document struct {
	BucketName        string             `json:"bucketName"`
	CreatedAt         time.Time          `json:"createdAt"`
	DocumentExtension DocumentExtension  `json:"documentExtension"`
	DocumentStatus    DocumentStatus     `json:"documentStatus"`
	Id                openapi_types.UUID `json:"id"`
	ObjectName        string             `json:"objectName"`
	SyncStep          SyncStep           `json:"syncStep"`
	Title             string             `json:"title"`
	UpdatedAt         time.Time          `json:"updatedAt"`
}

// DocumentExtension defines model for documentExtension.
type DocumentExtension string

// DocumentStatus defines model for documentStatus.
type DocumentStatus string

// ErrorCode defines model for errorCode.
type ErrorCode int

// SyncStep defines model for syncStep.
type SyncStep string

// DocumentIdPathParameter defines model for DocumentIdPathParameter.
type DocumentIdPathParameter = openapi_types.UUID

// CreateDocumentSuccess defines model for CreateDocumentSuccess.
type CreateDocumentSuccess struct {
	Id openapi_types.UUID `json:"id"`
}

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// GetDocumentSuccess defines model for GetDocumentSuccess.
type GetDocumentSuccess = Document

// ListDocumentsSuccess defines model for ListDocumentsSuccess.
type ListDocumentsSuccess struct {
	Documents []Document `json:"documents"`
}

// CreateDocument defines model for CreateDocument.
type CreateDocument struct {
	// Data File data in base64
	Data              []byte            `json:"data"`
	DocumentExtension DocumentExtension `json:"documentExtension"`
	Title             string            `json:"title"`
}

// CreateDocumentJSONBody defines parameters for CreateDocument.
type CreateDocumentJSONBody struct {
	// Data File data in base64
	Data              []byte            `json:"data"`
	DocumentExtension DocumentExtension `json:"documentExtension"`
	Title             string            `json:"title"`
}

// CreateDocumentJSONRequestBody defines body for CreateDocument for application/json ContentType.
type CreateDocumentJSONRequestBody CreateDocumentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List documents
	// (GET /api/documents)
	ListDocuments(ctx echo.Context) error
	// Create a document
	// (POST /api/documents)
	CreateDocument(ctx echo.Context) error
	// Delete a document by document id
	// (DELETE /api/documents/{documentId})
	DeleteDocument(ctx echo.Context, documentId DocumentIdPathParameter) error
	// Get a document by document id
	// (GET /api/documents/{documentId})
	GetDocument(ctx echo.Context, documentId DocumentIdPathParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) ListDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDocuments(ctx)
	return err
}

// CreateDocument converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "documentId" -------------
	var documentId DocumentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "documentId", ctx.Param("documentId"), &documentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter documentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDocument(ctx, documentId)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "documentId" -------------
	var documentId DocumentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "documentId", ctx.Param("documentId"), &documentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter documentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDocument(ctx, documentId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/documents", wrapper.ListDocuments)
	router.POST(baseURL+"/api/documents", wrapper.CreateDocument)
	router.DELETE(baseURL+"/api/documents/:documentId", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/documents/:documentId", wrapper.GetDocument)

}

type CreateDocumentSuccessJSONResponse struct {
	Id openapi_types.UUID `json:"id"`
}

type ErrorJSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

type GetDocumentSuccessJSONResponse Document

type ListDocumentsSuccessJSONResponse struct {
	Documents []Document `json:"documents"`
}

type ListDocumentsRequestObject struct {
}

type ListDocumentsResponseObject interface {
	VisitListDocumentsResponse(w http.ResponseWriter) error
}

type ListDocuments200JSONResponse struct {
	ListDocumentsSuccessJSONResponse
}

func (response ListDocuments200JSONResponse) VisitListDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDocuments400JSONResponse struct{ ErrorJSONResponse }

func (response ListDocuments400JSONResponse) VisitListDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListDocuments401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListDocuments401JSONResponse) VisitListDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListDocuments403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListDocuments403JSONResponse) VisitListDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListDocuments500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ListDocuments500JSONResponse) VisitListDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocumentRequestObject struct {
	Body *CreateDocumentJSONRequestBody
}

type CreateDocumentResponseObject interface {
	VisitCreateDocumentResponse(w http.ResponseWriter) error
}

type CreateDocument201JSONResponse struct {
	CreateDocumentSuccessJSONResponse
}

func (response CreateDocument201JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocument400JSONResponse struct{ ErrorJSONResponse }

func (response CreateDocument400JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocument401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateDocument401JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocument403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateDocument403JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocument409JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateDocument409JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateDocument500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response CreateDocument500JSONResponse) VisitCreateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDocumentRequestObject struct {
	DocumentId DocumentIdPathParameter `json:"documentId"`
}

type DeleteDocumentResponseObject interface {
	VisitDeleteDocumentResponse(w http.ResponseWriter) error
}

type DeleteDocument204Response struct {
}

func (response DeleteDocument204Response) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDocument400JSONResponse struct{ ErrorJSONResponse }

func (response DeleteDocument400JSONResponse) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDocument401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteDocument401JSONResponse) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDocument403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteDocument403JSONResponse) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDocument404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteDocument404JSONResponse) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDocument500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response DeleteDocument500JSONResponse) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDocumentRequestObject struct {
	DocumentId DocumentIdPathParameter `json:"documentId"`
}

type GetDocumentResponseObject interface {
	VisitGetDocumentResponse(w http.ResponseWriter) error
}

type GetDocument200JSONResponse struct{ GetDocumentSuccessJSONResponse }

func (response GetDocument200JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDocument400JSONResponse struct{ ErrorJSONResponse }

func (response GetDocument400JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDocument401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetDocument401JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDocument403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetDocument403JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDocument404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetDocument404JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDocument500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response GetDocument500JSONResponse) VisitGetDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List documents
	// (GET /api/documents)
	ListDocuments(ctx context.Context, request ListDocumentsRequestObject) (ListDocumentsResponseObject, error)
	// Create a document
	// (POST /api/documents)
	CreateDocument(ctx context.Context, request CreateDocumentRequestObject) (CreateDocumentResponseObject, error)
	// Delete a document by document id
	// (DELETE /api/documents/{documentId})
	DeleteDocument(ctx context.Context, request DeleteDocumentRequestObject) (DeleteDocumentResponseObject, error)
	// Get a document by document id
	// (GET /api/documents/{documentId})
	GetDocument(ctx context.Context, request GetDocumentRequestObject) (GetDocumentResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListDocuments operation middleware
func (sh *strictHandler) ListDocuments(ctx echo.Context) error {
	var request ListDocumentsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListDocuments(ctx.Request().Context(), request.(ListDocumentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDocuments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListDocumentsResponseObject); ok {
		return validResponse.VisitListDocumentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateDocument operation middleware
func (sh *strictHandler) CreateDocument(ctx echo.Context) error {
	var request CreateDocumentRequestObject

	var body CreateDocumentJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDocument(ctx.Request().Context(), request.(CreateDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDocument")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateDocumentResponseObject); ok {
		return validResponse.VisitCreateDocumentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteDocument operation middleware
func (sh *strictHandler) DeleteDocument(ctx echo.Context, documentId DocumentIdPathParameter) error {
	var request DeleteDocumentRequestObject

	request.DocumentId = documentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDocument(ctx.Request().Context(), request.(DeleteDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDocument")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteDocumentResponseObject); ok {
		return validResponse.VisitDeleteDocumentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDocument operation middleware
func (sh *strictHandler) GetDocument(ctx echo.Context, documentId DocumentIdPathParameter) error {
	var request GetDocumentRequestObject

	request.DocumentId = documentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDocument(ctx.Request().Context(), request.(GetDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDocument")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDocumentResponseObject); ok {
		return validResponse.VisitGetDocumentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY32/bNhD+V4TbHtlIWdQB9ZubtIWHoQiQAXsI/ECLZ5utRXLkKZth6H8fKOqXLTmV",
	"EQTIQ98s6nj33X13HykfINO50QoVOZgdwHDLcyS01dOdzoocFS3EPaftffPOvxLoMisNSa1g1hpGiztg",
	"IP2S4bQFBornCDMQrSdgYPGfQloUMCNbIAOXbTHn3uta25wTzKAopLekvfG7HVmpNlCWZdiMjj5qIbEC",
	"eWuREzYI/EqmFdU/uTE7mXEPM/7mPNZDL5yx2qCl2pHgxIepfZY7jPyrSKpoxR3+ngLrgK72hEOgrE34",
	"03+EyskQ+VeLa5jBL3FX9DigcfFwQ8mAJO3Q7zwtRL+Ij7XZWFAWslq2CPXqG2bUlbLjIaw4o5UbK+xD",
	"kWXo3AvqK8UUio8zk+IM9mOSAtSoyT9q8vA1/GStti+AnWmBPyIPfYxbb1gyyNE5vplAW2PIQowpiYZk",
	"SgZfkF7CzHPJtKM0Ev8L0niV/5SuBeRe3itNjNA4hLmbjrotI7eW7wdV71xPKbjPq83Y9VIuG906Usph",
	"Jqsi+470tZLBw1AnsqpzxZyOZkNwwnck81eUlmbxgTgVbqqL2rpk06aZ1ZU9m77bq+yB0Pwofmv3jCgy",
	"KIy4rJhDtWHPimmPzKPUBuXsZdbnuA9x2H1nqEVV5B6dEWtgkHP7Xeh/PZrMPfW8DBuko7Z1YbUfTG/n",
	"zZRHvuZyh2LUUSdrnY80SViaXLM0uWFpkrI0+cDeJ0m3XSrCDdpTdlsIqESI/4QZadsAWY6R4zArrKT9",
	"g2+DME8fkVu084K21XRVT58bqv/4+y+o59J7Cm872rdEJgy5VGs9POvni3e3WrliR1xRNBe5VNH8ftE2",
	"xXMWT2gDYXB9lVwlVe8bVNxImMHNVXJ1A6y6FFVZxNzI+EjkNlh1rZeOSiIXolafVlXh5Hz+LUnOjU1r",
	"F4/qcskgnbK5PW3S5Poi65sLrN9fgKTXEjB7PG6Gx2W5ZOCKPOd2P1BuzyHfuJMDoGRgtBsp/Mmlsn/t",
	"3J9H27uZxiceygF5Eyo6fgN7U+ylyYc3wHV9/+Mt32foLtnJ5MWH7sukDIKwQ8JhQ9xV672G6H8pPY6n",
	"1JnE576kfBonfZEOdemrjup7VBTwRS70wrrY7fZvrSHSN9AQga5eQ0Srffc7nPOjcjAqw73L9msyP6EU",
	"I9f+n+wP2PdfKZdS7wPU64fTfy0clMvy/wAAAP//rvZ0/isRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
