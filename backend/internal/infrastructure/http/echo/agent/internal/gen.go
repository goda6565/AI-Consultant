// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	N400 ErrorCode = 400
	N401 ErrorCode = 401
	N403 ErrorCode = 403
	N404 ErrorCode = 404
	N409 ErrorCode = 409
	N500 ErrorCode = 500
)

// ErrorCode defines model for errorCode.
type ErrorCode int

// ProblemIdPathParameter defines model for ProblemIdPathParameter.
type ProblemIdPathParameter = openapi_types.UUID

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ExecuteHearingSuccess defines model for ExecuteHearingSuccess.
type ExecuteHearingSuccess struct {
	// AssistantMessage AI consultant's response message
	AssistantMessage string `json:"assistant_message"`

	// IsCompleted Whether the hearing is completed
	IsCompleted bool `json:"is_completed"`
}

// ExecuteHearingRequest defines model for ExecuteHearingRequest.
type ExecuteHearingRequest struct {
	// UserMessage User's message to the AI consultant
	UserMessage *string `json:"user_message"`
}

// ExecuteHearingJSONBody defines parameters for ExecuteHearing.
type ExecuteHearingJSONBody struct {
	// UserMessage User's message to the AI consultant
	UserMessage *string `json:"user_message"`
}

// ExecuteHearingJSONRequestBody defines body for ExecuteHearing for application/json ContentType.
type ExecuteHearingJSONRequestBody ExecuteHearingJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Execute a hearing
	// (POST /api/hearings/{problemId})
	ExecuteHearing(ctx echo.Context, problemId ProblemIdPathParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExecuteHearing converts echo context to params.
func (w *ServerInterfaceWrapper) ExecuteHearing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "problemId" -------------
	var problemId ProblemIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "problemId", ctx.Param("problemId"), &problemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter problemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExecuteHearing(ctx, problemId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/hearings/:problemId", wrapper.ExecuteHearing)

}

type ErrorJSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

type ExecuteHearingSuccessJSONResponse struct {
	// AssistantMessage AI consultant's response message
	AssistantMessage string `json:"assistant_message"`

	// IsCompleted Whether the hearing is completed
	IsCompleted bool `json:"is_completed"`
}

type ExecuteHearingRequestObject struct {
	ProblemId ProblemIdPathParameter `json:"problemId"`
	Body      *ExecuteHearingJSONRequestBody
}

type ExecuteHearingResponseObject interface {
	VisitExecuteHearingResponse(w http.ResponseWriter) error
}

type ExecuteHearing200JSONResponse struct {
	ExecuteHearingSuccessJSONResponse
}

func (response ExecuteHearing200JSONResponse) VisitExecuteHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteHearing400JSONResponse struct{ ErrorJSONResponse }

func (response ExecuteHearing400JSONResponse) VisitExecuteHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteHearing401JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ExecuteHearing401JSONResponse) VisitExecuteHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteHearing403JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ExecuteHearing403JSONResponse) VisitExecuteHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteHearing404JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ExecuteHearing404JSONResponse) VisitExecuteHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteHearing500JSONResponse struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

func (response ExecuteHearing500JSONResponse) VisitExecuteHearingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Execute a hearing
	// (POST /api/hearings/{problemId})
	ExecuteHearing(ctx context.Context, request ExecuteHearingRequestObject) (ExecuteHearingResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ExecuteHearing operation middleware
func (sh *strictHandler) ExecuteHearing(ctx echo.Context, problemId ProblemIdPathParameter) error {
	var request ExecuteHearingRequestObject

	request.ProblemId = problemId

	var body ExecuteHearingJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteHearing(ctx.Request().Context(), request.(ExecuteHearingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteHearing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ExecuteHearingResponseObject); ok {
		return validResponse.VisitExecuteHearingResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RVXW/bOgz9KwbvBfqiG6s37sP81nYblj0F64Y+BEGhOGyswpY0SR4WBP7vAyV/pPkY",
	"GvQliESK5DmHpHdQ6Npohco7yHdghBU1erThNLd6VWE9W8+FL+e9iSxrdIWVxkutIO/9ktlHYCDpxghf",
	"AgMlaqRTHwcYWPzZSItryL1tkIErSqwFxXzWthYecmgaSZ5+a+ix81aqDbRtGx+j83d6LTFU+Ok3Fo3H",
	"LyjI6Vs0k6HQyqMKf4UxlSwE1Zq+OCp4t5fVWG3Q+i5e49A+1eic2OAxzh8O7ZVLOnvideJLTG5nSaGV",
	"ayovlCfQTVWJVYU9wkMcw41evWDhR2QjLfHGGa1ch9Nabd+Bq9DrgOdfi8+Qwz/pKHsa37gUKcc9ObYM",
	"9jg4rn8sdjE4sphjeRLdaxojmJYdqPfQFAU69w6UwjnpSIXzEr4S68olPcvJiOMALwPpnoiuCj1BPoz4",
	"WKIv0YZWKCOSRLpkfDFEXGldoVBHFB6XfZDzTaRGLocSemAhWycxFT+qTAfV1JAvMs5Zxq9Zxqcs4xnL",
	"+Ad2w/mYViqPG7QxFhaNlX77QDEj73coLNrbxpd0WoXT536avz5+h66CQEKwjqSU3puIR6pnfUqw/+4H",
	"wZLbDdLvfEYBpKch+4vHL7QuRrme8AknLbVBJYyEHKYTPpkCC6sqoEiFkWlHn0t3w9JqQ6PpuFeo3UIz",
	"ztYj6V0Dh2Dj/lycHrfRJT2zX9vl/qbbnpvbV8swPb0JD/fI/5yfD9f5pafHsmWQvel1P90Zv77Ie3qR",
	"d3aB980Fde91eJBwv7cXS5LGNXUt7HZv5kQ/ddSVYkPaQ99IsAzN3V3v+k/iYG6X7Z8AAAD//6V2cYWF",
	"BwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
