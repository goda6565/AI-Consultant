// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: action.sql

package app

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAction = `-- name: CreateAction :exec
INSERT INTO actions (id, problem_id, action_type, input, output) VALUES ($1, $2, $3, $4, $5)
`

type CreateActionParams struct {
	ID         pgtype.UUID
	ProblemID  pgtype.UUID
	ActionType string
	Input      string
	Output     string
}

func (q *Queries) CreateAction(ctx context.Context, arg CreateActionParams) error {
	_, err := q.db.Exec(ctx, createAction,
		arg.ID,
		arg.ProblemID,
		arg.ActionType,
		arg.Input,
		arg.Output,
	)
	return err
}

const deleteActionsByProblemID = `-- name: DeleteActionsByProblemID :execrows
DELETE FROM actions WHERE problem_id = $1
`

func (q *Queries) DeleteActionsByProblemID(ctx context.Context, problemID pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteActionsByProblemID, problemID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getActionsByProblemID = `-- name: GetActionsByProblemID :many
SELECT id, problem_id, action_type, input, output, created_at FROM actions WHERE problem_id = $1 ORDER BY created_at ASC
`

func (q *Queries) GetActionsByProblemID(ctx context.Context, problemID pgtype.UUID) ([]Action, error) {
	rows, err := q.db.Query(ctx, getActionsByProblemID, problemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Action
	for rows.Next() {
		var i Action
		if err := rows.Scan(
			&i.ID,
			&i.ProblemID,
			&i.ActionType,
			&i.Input,
			&i.Output,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
