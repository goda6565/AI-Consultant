// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: job_config.sql

package app

import (
	"context"
)

const createJobConfig = `-- name: CreateJobConfig :exec
INSERT INTO job_configs (id, problem_id, enable_internal_search) VALUES ($1, $2, $3)
`

type CreateJobConfigParams struct {
	ID                   string
	ProblemID            string
	EnableInternalSearch bool
}

func (q *Queries) CreateJobConfig(ctx context.Context, arg CreateJobConfigParams) error {
	_, err := q.db.Exec(ctx, createJobConfig, arg.ID, arg.ProblemID, arg.EnableInternalSearch)
	return err
}

const deleteJobConfigByProblemID = `-- name: DeleteJobConfigByProblemID :execrows
DELETE FROM job_configs WHERE problem_id = $1
`

func (q *Queries) DeleteJobConfigByProblemID(ctx context.Context, problemID string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteJobConfigByProblemID, problemID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getJobConfigByProblemID = `-- name: GetJobConfigByProblemID :one
SELECT id, problem_id, enable_internal_search FROM job_configs WHERE problem_id = $1
`

func (q *Queries) GetJobConfigByProblemID(ctx context.Context, problemID string) (JobConfig, error) {
	row := q.db.QueryRow(ctx, getJobConfigByProblemID, problemID)
	var i JobConfig
	err := row.Scan(&i.ID, &i.ProblemID, &i.EnableInternalSearch)
	return i, err
}

const updateJobConfig = `-- name: UpdateJobConfig :exec
UPDATE job_configs SET enable_internal_search = $2 WHERE id = $1
`

type UpdateJobConfigParams struct {
	ID                   string
	EnableInternalSearch bool
}

func (q *Queries) UpdateJobConfig(ctx context.Context, arg UpdateJobConfigParams) error {
	_, err := q.db.Exec(ctx, updateJobConfig, arg.ID, arg.EnableInternalSearch)
	return err
}
