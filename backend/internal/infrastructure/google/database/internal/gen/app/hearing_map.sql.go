// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: hearing_map.sql

package app

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHearingMap = `-- name: CreateHearingMap :exec
INSERT INTO hearing_maps (id, hearing_id, problem_id, content) VALUES ($1, $2, $3, $4)
`

type CreateHearingMapParams struct {
	ID        pgtype.UUID
	HearingID pgtype.UUID
	ProblemID pgtype.UUID
	Content   string
}

func (q *Queries) CreateHearingMap(ctx context.Context, arg CreateHearingMapParams) error {
	_, err := q.db.Exec(ctx, createHearingMap,
		arg.ID,
		arg.HearingID,
		arg.ProblemID,
		arg.Content,
	)
	return err
}

const deleteHearingMapByHearingID = `-- name: DeleteHearingMapByHearingID :execrows
DELETE FROM hearing_maps WHERE hearing_id = $1
`

func (q *Queries) DeleteHearingMapByHearingID(ctx context.Context, hearingID pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteHearingMapByHearingID, hearingID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getHearingMapByHearingID = `-- name: GetHearingMapByHearingID :one
SELECT id, hearing_id, problem_id, content FROM hearing_maps WHERE hearing_id = $1
`

func (q *Queries) GetHearingMapByHearingID(ctx context.Context, hearingID pgtype.UUID) (HearingMap, error) {
	row := q.db.QueryRow(ctx, getHearingMapByHearingID, hearingID)
	var i HearingMap
	err := row.Scan(
		&i.ID,
		&i.HearingID,
		&i.ProblemID,
		&i.Content,
	)
	return i, err
}
