// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: hearing.sql

package app

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHearing = `-- name: CreateHearing :exec
INSERT INTO hearings (id, problem_id) VALUES ($1, $2)
`

type CreateHearingParams struct {
	ID        pgtype.UUID
	ProblemID pgtype.UUID
}

func (q *Queries) CreateHearing(ctx context.Context, arg CreateHearingParams) error {
	_, err := q.db.Exec(ctx, createHearing, arg.ID, arg.ProblemID)
	return err
}

const deleteHearingByProblemID = `-- name: DeleteHearingByProblemID :execrows
DELETE FROM hearings WHERE problem_id = $1
`

func (q *Queries) DeleteHearingByProblemID(ctx context.Context, problemID pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteHearingByProblemID, problemID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getHearingById = `-- name: GetHearingById :one
SELECT id, problem_id, created_at FROM hearings WHERE id = $1
`

func (q *Queries) GetHearingById(ctx context.Context, id pgtype.UUID) (Hearing, error) {
	row := q.db.QueryRow(ctx, getHearingById, id)
	var i Hearing
	err := row.Scan(&i.ID, &i.ProblemID, &i.CreatedAt)
	return i, err
}

const getHearingByProblemId = `-- name: GetHearingByProblemId :one
SELECT id, problem_id, created_at FROM hearings WHERE problem_id = $1
`

func (q *Queries) GetHearingByProblemId(ctx context.Context, problemID pgtype.UUID) (Hearing, error) {
	row := q.db.QueryRow(ctx, getHearingByProblemId, problemID)
	var i Hearing
	err := row.Scan(&i.ID, &i.ProblemID, &i.CreatedAt)
	return i, err
}
