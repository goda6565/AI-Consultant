// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: document.sql

package app

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDocument = `-- name: CreateDocument :exec
INSERT INTO documents (id, title, document_type, bucket_name, object_name, document_status, retry_count) VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateDocumentParams struct {
	ID             pgtype.UUID
	Title          string
	DocumentType   string
	BucketName     string
	ObjectName     string
	DocumentStatus string
	RetryCount     int32
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) error {
	_, err := q.db.Exec(ctx, createDocument,
		arg.ID,
		arg.Title,
		arg.DocumentType,
		arg.BucketName,
		arg.ObjectName,
		arg.DocumentStatus,
		arg.RetryCount,
	)
	return err
}

const deleteDocument = `-- name: DeleteDocument :execrows
DELETE FROM documents WHERE id = $1
`

func (q *Queries) DeleteDocument(ctx context.Context, id pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteDocument, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllDocuments = `-- name: GetAllDocuments :many
SELECT id, title, document_type, bucket_name, object_name, document_status, retry_count, created_at, updated_at FROM documents ORDER BY created_at DESC
`

func (q *Queries) GetAllDocuments(ctx context.Context) ([]Document, error) {
	rows, err := q.db.Query(ctx, getAllDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DocumentType,
			&i.BucketName,
			&i.ObjectName,
			&i.DocumentStatus,
			&i.RetryCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocument = `-- name: GetDocument :one
SELECT id, title, document_type, bucket_name, object_name, document_status, retry_count, created_at, updated_at FROM documents WHERE id = $1
`

func (q *Queries) GetDocument(ctx context.Context, id pgtype.UUID) (Document, error) {
	row := q.db.QueryRow(ctx, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DocumentType,
		&i.BucketName,
		&i.ObjectName,
		&i.DocumentStatus,
		&i.RetryCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDocumentByTitle = `-- name: GetDocumentByTitle :one
SELECT id, title, document_type, bucket_name, object_name, document_status, retry_count, created_at, updated_at FROM documents WHERE title = $1
`

func (q *Queries) GetDocumentByTitle(ctx context.Context, title string) (Document, error) {
	row := q.db.QueryRow(ctx, getDocumentByTitle, title)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DocumentType,
		&i.BucketName,
		&i.ObjectName,
		&i.DocumentStatus,
		&i.RetryCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDocument = `-- name: UpdateDocument :execrows
UPDATE documents SET title = $2, document_type = $3, bucket_name = $4, object_name = $5, document_status = $6, retry_count = $7 WHERE id = $1
`

type UpdateDocumentParams struct {
	ID             pgtype.UUID
	Title          string
	DocumentType   string
	BucketName     string
	ObjectName     string
	DocumentStatus string
	RetryCount     int32
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateDocument,
		arg.ID,
		arg.Title,
		arg.DocumentType,
		arg.BucketName,
		arg.ObjectName,
		arg.DocumentStatus,
		arg.RetryCount,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
