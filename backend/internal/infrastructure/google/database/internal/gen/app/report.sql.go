// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: report.sql

package app

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReport = `-- name: CreateReport :exec
INSERT INTO reports (id, problem_id, content) VALUES ($1, $2, $3)
`

type CreateReportParams struct {
	ID        pgtype.UUID
	ProblemID pgtype.UUID
	Content   string
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) error {
	_, err := q.db.Exec(ctx, createReport, arg.ID, arg.ProblemID, arg.Content)
	return err
}

const deleteReportsByProblemID = `-- name: DeleteReportsByProblemID :execrows
DELETE FROM reports WHERE problem_id = $1
`

func (q *Queries) DeleteReportsByProblemID(ctx context.Context, problemID pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteReportsByProblemID, problemID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getReportByProblemID = `-- name: GetReportByProblemID :one
SELECT id, problem_id, content, created_at FROM reports WHERE problem_id = $1
`

func (q *Queries) GetReportByProblemID(ctx context.Context, problemID pgtype.UUID) (Report, error) {
	row := q.db.QueryRow(ctx, getReportByProblemID, problemID)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.ProblemID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
