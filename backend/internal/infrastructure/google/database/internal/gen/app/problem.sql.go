// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: problem.sql

package app

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProblem = `-- name: CreateProblem :exec
INSERT INTO problems (id, title, description, status) VALUES ($1, $2, $3, $4)
`

type CreateProblemParams struct {
	ID          pgtype.UUID
	Title       string
	Description string
	Status      string
}

func (q *Queries) CreateProblem(ctx context.Context, arg CreateProblemParams) error {
	_, err := q.db.Exec(ctx, createProblem,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
	)
	return err
}

const deleteProblem = `-- name: DeleteProblem :execrows
DELETE FROM problems WHERE id = $1
`

func (q *Queries) DeleteProblem(ctx context.Context, id pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteProblem, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllProblems = `-- name: GetAllProblems :many
SELECT id, title, description, status, created_at FROM problems ORDER BY created_at DESC
`

func (q *Queries) GetAllProblems(ctx context.Context) ([]Problem, error) {
	rows, err := q.db.Query(ctx, getAllProblems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Problem
	for rows.Next() {
		var i Problem
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProblemById = `-- name: GetProblemById :one
SELECT id, title, description, status, created_at FROM problems WHERE id = $1
`

func (q *Queries) GetProblemById(ctx context.Context, id pgtype.UUID) (Problem, error) {
	row := q.db.QueryRow(ctx, getProblemById, id)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateProblemStatus = `-- name: UpdateProblemStatus :execrows
UPDATE problems SET status = $2 WHERE id = $1
`

type UpdateProblemStatusParams struct {
	ID     pgtype.UUID
	Status string
}

func (q *Queries) UpdateProblemStatus(ctx context.Context, arg UpdateProblemStatusParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateProblemStatus, arg.ID, arg.Status)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
