// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: problem_field.sql

package app

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProblemField = `-- name: CreateProblemField :exec
INSERT INTO problem_fields (id, problem_id, field, answered) VALUES ($1, $2, $3, $4)
`

type CreateProblemFieldParams struct {
	ID        pgtype.UUID
	ProblemID pgtype.UUID
	Field     string
	Answered  bool
}

func (q *Queries) CreateProblemField(ctx context.Context, arg CreateProblemFieldParams) error {
	_, err := q.db.Exec(ctx, createProblemField,
		arg.ID,
		arg.ProblemID,
		arg.Field,
		arg.Answered,
	)
	return err
}

const deleteProblemFieldByProblemID = `-- name: DeleteProblemFieldByProblemID :execrows
DELETE FROM problem_fields WHERE problem_id = $1
`

func (q *Queries) DeleteProblemFieldByProblemID(ctx context.Context, problemID pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteProblemFieldByProblemID, problemID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findByProblemID = `-- name: FindByProblemID :many
SELECT id, problem_id, field, answered, created_at FROM problem_fields WHERE problem_id = $1
`

func (q *Queries) FindByProblemID(ctx context.Context, problemID pgtype.UUID) ([]ProblemField, error) {
	rows, err := q.db.Query(ctx, findByProblemID, problemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProblemField
	for rows.Next() {
		var i ProblemField
		if err := rows.Scan(
			&i.ID,
			&i.ProblemID,
			&i.Field,
			&i.Answered,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnswered = `-- name: UpdateAnswered :execrows
UPDATE problem_fields SET answered = $2 WHERE id = $1
`

type UpdateAnsweredParams struct {
	ID       pgtype.UUID
	Answered bool
}

func (q *Queries) UpdateAnswered(ctx context.Context, arg UpdateAnsweredParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateAnswered, arg.ID, arg.Answered)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
