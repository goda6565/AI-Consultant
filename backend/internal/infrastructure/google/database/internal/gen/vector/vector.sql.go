// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: vector.sql

package vector

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const createVector = `-- name: CreateVector :exec
INSERT INTO vectors (id, document_id, content, parent_content, embedding) VALUES ($1, $2, $3, $4, $5)
`

type CreateVectorParams struct {
	ID            pgtype.UUID
	DocumentID    pgtype.UUID
	Content       string
	ParentContent string
	Embedding     pgvector.Vector
}

func (q *Queries) CreateVector(ctx context.Context, arg CreateVectorParams) error {
	_, err := q.db.Exec(ctx, createVector,
		arg.ID,
		arg.DocumentID,
		arg.Content,
		arg.ParentContent,
		arg.Embedding,
	)
	return err
}

const deleteVector = `-- name: DeleteVector :execrows
DELETE FROM vectors WHERE document_id = $1
`

func (q *Queries) DeleteVector(ctx context.Context, documentID pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteVector, documentID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const searchVector = `-- name: SearchVector :many
SELECT id, document_id, content, parent_content, (1 - (embedding <=> $1))::float8 AS similarity FROM vectors ORDER BY similarity DESC LIMIT $2
`

type SearchVectorParams struct {
	Embedding pgvector.Vector
	Limit     int32
}

type SearchVectorRow struct {
	ID            pgtype.UUID
	DocumentID    pgtype.UUID
	Content       string
	ParentContent string
	Similarity    float64
}

func (q *Queries) SearchVector(ctx context.Context, arg SearchVectorParams) ([]SearchVectorRow, error) {
	rows, err := q.db.Query(ctx, searchVector, arg.Embedding, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchVectorRow
	for rows.Next() {
		var i SearchVectorRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentID,
			&i.Content,
			&i.ParentContent,
			&i.Similarity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
