/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * AI-Consultant Agent API
 * AI-Consultant Agent API
 * OpenAPI spec version: 1.0.0
 */
import type { Key } from "swr";
import type { SWRMutationConfiguration } from "swr/mutation";
import useSWRMutation from "swr/mutation";
import { agentApiClient } from "../../client";
import type {
  ErrorResponse,
  ExecuteHearingRequestBody,
  ExecuteHearingSuccessResponse,
} from ".././model";

/**
 * @summary Execute a hearing
 */
export const executeHearing = (
  problemId: string,
  executeHearingRequestBody: ExecuteHearingRequestBody,
) => {
  return agentApiClient<ExecuteHearingSuccessResponse>({
    url: `/api/hearings/${problemId}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: executeHearingRequestBody,
  });
};

export const getExecuteHearingMutationFetcher = (problemId: string) => {
  return (
    _: Key,
    { arg }: { arg: ExecuteHearingRequestBody },
  ): Promise<ExecuteHearingSuccessResponse> => {
    return executeHearing(problemId, arg);
  };
};
export const getExecuteHearingMutationKey = (problemId: string) =>
  [`/api/hearings/${problemId}`] as const;

export type ExecuteHearingMutationResult = NonNullable<
  Awaited<ReturnType<typeof executeHearing>>
>;
export type ExecuteHearingMutationError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Execute a hearing
 */
export const useExecuteHearing = <
  TError =
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse,
>(
  problemId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof executeHearing>>,
      TError,
      Key,
      ExecuteHearingRequestBody,
      Awaited<ReturnType<typeof executeHearing>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getExecuteHearingMutationKey(problemId);
  const swrFn = getExecuteHearingMutationFetcher(problemId);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
