/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * AI-Consultant Admin API
 * AI-Consultant Admin API
 * OpenAPI spec version: 1.0.0
 */

import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";
import type { SWRMutationConfiguration } from "swr/mutation";
import useSWRMutation from "swr/mutation";
import { adminApiClient } from "../../client";
import type {
  ErrorResponse,
  GetJobConfigSuccessResponse,
  UpdateJobConfigBody,
  UpdateJobConfigSuccessResponse,
} from ".././model";

/**
 * @summary Get a job config by problem id
 */
export const getJobConfig = (problemId: string) => {
  return adminApiClient<GetJobConfigSuccessResponse>({
    url: `/api/job-configs/${problemId}`,
    method: "GET",
  });
};

export const getGetJobConfigKey = (problemId: string) =>
  [`/api/job-configs/${problemId}`] as const;

export type GetJobConfigQueryResult = NonNullable<
  Awaited<ReturnType<typeof getJobConfig>>
>;
export type GetJobConfigQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Get a job config by problem id
 */
export const useGetJobConfig = <
  TError =
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse,
>(
  problemId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getJobConfig>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!problemId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetJobConfigKey(problemId) : null));
  const swrFn = () => getJobConfig(problemId);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Update a job config by problem id
 */
export const updateJobConfig = (
  problemId: string,
  updateJobConfigBody: UpdateJobConfigBody,
) => {
  return adminApiClient<UpdateJobConfigSuccessResponse>({
    url: `/api/job-configs/${problemId}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateJobConfigBody,
  });
};

export const getUpdateJobConfigMutationFetcher = (problemId: string) => {
  return (
    _: Key,
    { arg }: { arg: UpdateJobConfigBody },
  ): Promise<UpdateJobConfigSuccessResponse> => {
    return updateJobConfig(problemId, arg);
  };
};
export const getUpdateJobConfigMutationKey = (problemId: string) =>
  [`/api/job-configs/${problemId}`] as const;

export type UpdateJobConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateJobConfig>>
>;
export type UpdateJobConfigMutationError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Update a job config by problem id
 */
export const useUpdateJobConfig = <
  TError =
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse,
>(
  problemId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateJobConfig>>,
      TError,
      Key,
      UpdateJobConfigBody,
      Awaited<ReturnType<typeof updateJobConfig>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getUpdateJobConfigMutationKey(problemId);
  const swrFn = getUpdateJobConfigMutationFetcher(problemId);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
