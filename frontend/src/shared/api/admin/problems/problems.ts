/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * AI-Consultant Admin API
 * AI-Consultant Admin API
 * OpenAPI spec version: 1.0.0
 */

import type { Arguments, Key, SWRConfiguration } from "swr";
import useSwr from "swr";
import type { SWRMutationConfiguration } from "swr/mutation";
import useSWRMutation from "swr/mutation";
import { adminApiClient } from "../../client";
import type {
  CreateProblemBody,
  CreateProblemSuccessResponse,
  ErrorResponse,
  GetProblemSuccessResponse,
  ListProblemsSuccessResponse,
} from ".././model";

/**
 * @summary List problems
 */
export const listProblems = () => {
  return adminApiClient<ListProblemsSuccessResponse>({
    url: `/api/problems`,
    method: "GET",
  });
};

export const getListProblemsKey = () => [`/api/problems`] as const;

export type ListProblemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listProblems>>
>;
export type ListProblemsQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary List problems
 */
export const useListProblems = <
  TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof listProblems>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getListProblemsKey() : null));
  const swrFn = () => listProblems();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Create a problem
 */
export const createProblem = (createProblemBody: CreateProblemBody) => {
  return adminApiClient<CreateProblemSuccessResponse>({
    url: `/api/problems`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createProblemBody,
  });
};

export const getCreateProblemMutationFetcher = () => {
  return (
    _: Key,
    { arg }: { arg: CreateProblemBody },
  ): Promise<CreateProblemSuccessResponse> => {
    return createProblem(arg);
  };
};
export const getCreateProblemMutationKey = () => [`/api/problems`] as const;

export type CreateProblemMutationResult = NonNullable<
  Awaited<ReturnType<typeof createProblem>>
>;
export type CreateProblemMutationError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Create a problem
 */
export const useCreateProblem = <
  TError =
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof createProblem>>,
    TError,
    Key,
    CreateProblemBody,
    Awaited<ReturnType<typeof createProblem>>
  > & { swrKey?: string };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCreateProblemMutationKey();
  const swrFn = getCreateProblemMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Get a problem by problem id
 */
export const getProblem = (problemId: string) => {
  return adminApiClient<GetProblemSuccessResponse>({
    url: `/api/problems/${problemId}`,
    method: "GET",
  });
};

export const getGetProblemKey = (problemId: string) =>
  [`/api/problems/${problemId}`] as const;

export type GetProblemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProblem>>
>;
export type GetProblemQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Get a problem by problem id
 */
export const useGetProblem = <
  TError =
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse,
>(
  problemId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getProblem>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!problemId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetProblemKey(problemId) : null));
  const swrFn = () => getProblem(problemId);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Delete a problem by problem id
 */
export const deleteProblem = (problemId: string) => {
  return adminApiClient<null>({
    url: `/api/problems/${problemId}`,
    method: "DELETE",
  });
};

export const getDeleteProblemMutationFetcher = (problemId: string) => {
  return (_: Key, __: { arg: Arguments }): Promise<null> => {
    return deleteProblem(problemId);
  };
};
export const getDeleteProblemMutationKey = (problemId: string) =>
  [`/api/problems/${problemId}`] as const;

export type DeleteProblemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProblem>>
>;
export type DeleteProblemMutationError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Delete a problem by problem id
 */
export const useDeleteProblem = <
  TError =
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse,
>(
  problemId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteProblem>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deleteProblem>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteProblemMutationKey(problemId);
  const swrFn = getDeleteProblemMutationFetcher(problemId);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
