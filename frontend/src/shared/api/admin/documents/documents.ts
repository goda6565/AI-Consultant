/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * AI-Consultant Admin API
 * AI-Consultant Admin API
 * OpenAPI spec version: 1.0.0
 */

import type { Arguments, Key, SWRConfiguration } from "swr";
import useSwr from "swr";
import type { SWRMutationConfiguration } from "swr/mutation";
import useSWRMutation from "swr/mutation";
import { adminApiClient } from "../../client";
import type {
  CreateDocumentBody,
  CreateDocumentSuccessResponse,
  ErrorResponse,
  GetDocumentSuccessResponse,
  ListDocumentsSuccessResponse,
} from ".././model";

/**
 * @summary Get a document by document id
 */
export const getDocument = (documentId: string) => {
  return adminApiClient<GetDocumentSuccessResponse>({
    url: `/api/documents/${documentId}`,
    method: "GET",
  });
};

export const getGetDocumentKey = (documentId: string) =>
  [`/api/documents/${documentId}`] as const;

export type GetDocumentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDocument>>
>;
export type GetDocumentQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Get a document by document id
 */
export const useGetDocument = <
  TError =
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse,
>(
  documentId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getDocument>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!documentId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetDocumentKey(documentId) : null));
  const swrFn = () => getDocument(documentId);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Delete a document by document id
 */
export const deleteDocument = (documentId: string) => {
  return adminApiClient<null>({
    url: `/api/documents/${documentId}`,
    method: "DELETE",
  });
};

export const getDeleteDocumentMutationFetcher = (documentId: string) => {
  return (_: Key, __: { arg: Arguments }): Promise<null> => {
    return deleteDocument(documentId);
  };
};
export const getDeleteDocumentMutationKey = (documentId: string) =>
  [`/api/documents/${documentId}`] as const;

export type DeleteDocumentMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDocument>>
>;
export type DeleteDocumentMutationError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Delete a document by document id
 */
export const useDeleteDocument = <
  TError =
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse,
>(
  documentId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteDocument>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deleteDocument>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteDocumentMutationKey(documentId);
  const swrFn = getDeleteDocumentMutationFetcher(documentId);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary List documents
 */
export const listDocuments = () => {
  return adminApiClient<ListDocumentsSuccessResponse>({
    url: `/api/documents`,
    method: "GET",
  });
};

export const getListDocumentsKey = () => [`/api/documents`] as const;

export type ListDocumentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDocuments>>
>;
export type ListDocumentsQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary List documents
 */
export const useListDocuments = <
  TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof listDocuments>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getListDocumentsKey() : null));
  const swrFn = () => listDocuments();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Create a document
 */
export const createDocument = (createDocumentBody: CreateDocumentBody) => {
  return adminApiClient<CreateDocumentSuccessResponse>({
    url: `/api/documents`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createDocumentBody,
  });
};

export const getCreateDocumentMutationFetcher = () => {
  return (
    _: Key,
    { arg }: { arg: CreateDocumentBody },
  ): Promise<CreateDocumentSuccessResponse> => {
    return createDocument(arg);
  };
};
export const getCreateDocumentMutationKey = () => [`/api/documents`] as const;

export type CreateDocumentMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDocument>>
>;
export type CreateDocumentMutationError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Create a document
 */
export const useCreateDocument = <
  TError =
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof createDocument>>,
    TError,
    Key,
    CreateDocumentBody,
    Awaited<ReturnType<typeof createDocument>>
  > & { swrKey?: string };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCreateDocumentMutationKey();
  const swrFn = getCreateDocumentMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
