/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * AI-Consultant Admin API
 * AI-Consultant Admin API
 * OpenAPI spec version: 1.0.0
 */

import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";
import { adminApiClient } from "../../client";
import type { ErrorResponse, ListEventsSuccessResponse } from ".././model";

/**
 * Event History of Problem
 * @summary List events by problem id
 */
export const listEvents = (problemId: string) => {
  return adminApiClient<ListEventsSuccessResponse>({
    url: `/api/events/${problemId}`,
    method: "GET",
  });
};

export const getListEventsKey = (problemId: string) =>
  [`/api/events/${problemId}`] as const;

export type ListEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listEvents>>
>;
export type ListEventsQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary List events by problem id
 */
export const useListEvents = <
  TError =
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse
    | ErrorResponse,
>(
  problemId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof listEvents>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!problemId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getListEventsKey(problemId) : null));
  const swrFn = () => listEvents(problemId);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
